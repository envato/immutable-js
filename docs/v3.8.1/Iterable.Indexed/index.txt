2:I[6556,["346","static/chunks/346-c06e7efa10f5ccdb.js","609","static/chunks/app/docs/%5Bversion%5D/%5Btype%5D/page-1c0b3e03993b4b68.js"],"TypeDocumentation"]
11:I[103,[],""]
14:I[5885,[],""]
15:I[4063,["346","static/chunks/346-c06e7efa10f5ccdb.js","397","static/chunks/397-6dd2ff192d8a9ea9.js","15","static/chunks/15-ddea9c0dc1b2ecf5.js","356","static/chunks/app/docs/%5Bversion%5D/layout-3225f3df119af2cc.js"],"ImmutableConsole"]
16:I[914,["346","static/chunks/346-c06e7efa10f5ccdb.js","397","static/chunks/397-6dd2ff192d8a9ea9.js","15","static/chunks/15-ddea9c0dc1b2ecf5.js","356","static/chunks/app/docs/%5Bversion%5D/layout-3225f3df119af2cc.js"],"HeaderLogoLink"]
17:I[914,["346","static/chunks/346-c06e7efa10f5ccdb.js","397","static/chunks/397-6dd2ff192d8a9ea9.js","15","static/chunks/15-ddea9c0dc1b2ecf5.js","356","static/chunks/app/docs/%5Bversion%5D/layout-3225f3df119af2cc.js"],"HeaderLinks"]
3:Tb96,<p>The resulting Iterable includes the first item from each, then the
second from each, etc.</p>
<code class="codeBlock"><span class="token constant">I</span><span class="token punctuation">.</span><span class="token qualifier">Seq</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interleave</span><span class="token punctuation">(</span><span class="token constant">I</span><span class="token punctuation">.</span><span class="token qualifier">Seq</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Seq [ 1, 'A', 2, 'B', 3, 'C' ]</span></code><p>The shortest Iterable stops interleave.</p>
<code class="codeBlock"><span class="token constant">I</span><span class="token punctuation">.</span><span class="token qualifier">Seq</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interleave</span><span class="token punctuation">(</span>
  <span class="token constant">I</span><span class="token punctuation">.</span><span class="token qualifier">Seq</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token constant">I</span><span class="token punctuation">.</span><span class="token qualifier">Seq</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">,</span><span class="token string">'Y'</span><span class="token punctuation">,</span><span class="token string">'Z'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token comment">// Seq [ 1, 'A', 'X', 2, 'B', 'Y' ]</span></code>4:T5d3,<p><code><span class="t param">index</span></code> may be a negative number, which indexes back from the end of the
Iterable. <code>s<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span></code> splices after the second to last item.</p>
<code class="codeBlock"><span class="token function">Seq</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">)</span>
<span class="token comment">// Seq ['a', 'q', 'r', 's', 'd']</span></code>5:T68f,<p>Like <code><a href="/docs/v3.8.1/List#zipWith()">zipWith</a></code>, but using the default <code>zipper</code>: creating an <code><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">Array</a></code>.</p>
<code class="codeBlock"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token qualifier">Seq</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token qualifier">Seq</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Seq [ [ 1, 4 ], [ 2, 5 ], [ 3, 6 ] ]</span></code>6:Ta7f,<p>The <code><a href="/docs/v3.8.1/List#hashCode()">hashCode</a></code> of an Iterable is used to determine potential equality,
and is used when adding this to a <code><a href="/docs/v3.8.1/Set">Set</a></code> or as a key in a <code><a href="/docs/v3.8.1/Map">Map</a></code>, enabling
lookup via a different instance.</p>
<code class="codeBlock"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token qualifier">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token qualifier">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assert</span><span class="token punctuation">(</span>a <span class="token operator">!==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// different instances</span>
<span class="token keyword">var</span> set <span class="token operator">=</span> <span class="token qualifier">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assert</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token primitive">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><p>If two values have the same <code><a href="/docs/v3.8.1/List#hashCode()">hashCode</a></code>, they are <a href="http://en.wikipedia.org/wiki/Collision_(computer_science)">not guaranteed
to be equal</a>. If two values have different <code><a href="/docs/v3.8.1/List#hashCode()">hashCode</a></code>s,
they must not be equal.</p>
7:{"k":6}
8:{"k":11,"param":"T"}
9:T8b5,<p>This is useful if you want to operate on an
Iterable.Indexed and preserve the [index, value] pairs.</p>
<p>The returned Seq will have identical iteration order as
this Iterable.</p>
<p>Example:</p>
<code class="codeBlock"><span class="token keyword">var</span> indexedSeq <span class="token operator">=</span> <span class="token qualifier">Immutable</span><span class="token punctuation">.</span><span class="token qualifier">Seq</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
indexedSeq<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">===</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Seq [ 'B' ]</span>
<span class="token keyword">var</span> keyedSeq <span class="token operator">=</span> indexedSeq<span class="token punctuation">.</span><span class="token function">toKeyedSeq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
keyedSeq<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">===</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Seq { 1: 'B' }</span></code>a:T51e,<p><code class="codeBlock"><span class="token function">Seq</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token literal-property property">d</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">// Seq { b: 2, d: 4 }</span></code></p>
b:T521,<p><code class="codeBlock"><span class="token function">Seq</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token literal-property property">d</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filterNot</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">// Seq { a: 1, c: 3 }</span></code></p>
c:T4ed,<p>If a <code><span class="t param">comparator</span></code> is not provided, a default comparator uses <code><span class="token operator">&lt;</span></code> and <code><span class="token operator">></span></code>.</p>
<p><code><span class="token function">comparator</span><span class="token punctuation">(</span>valueA<span class="token punctuation">,</span> valueB<span class="token punctuation">)</span></code>:</p>
<ul>
<li>Returns <code><span class="token number">0</span></code> if the elements should not be swapped.</li>
<li>Returns <code><span class="token operator">-</span><span class="token number">1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>
<li>Returns <code><span class="token number">1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>
<li>Is pure, i.e. it must always return the same value for the same pair
of values.</li>
</ul>
<p>When sorting collections which have no defined order, their ordered
equivalents will be returned. e.g. <code>map<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> returns OrderedMap.</p>
d:T4dc,<p><code class="codeBlock"><span class="token qualifier">Seq</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">,</span><span class="token string">'frog'</span><span class="token punctuation">,</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token string">'hat'</span><span class="token punctuation">,</span><span class="token string">'god'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">skipWhile</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">g</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Seq [ 'cat', 'hat', 'god' ]</span></code></p>
e:T4d7,<p><code class="codeBlock"><span class="token qualifier">Seq</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">,</span><span class="token string">'frog'</span><span class="token punctuation">,</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token string">'hat'</span><span class="token punctuation">,</span><span class="token string">'god'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">skipUntil</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hat</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Seq [ 'hat', 'god' ]</span></code></p>
f:T4d6,<p><code class="codeBlock"><span class="token qualifier">Seq</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">,</span><span class="token string">'frog'</span><span class="token punctuation">,</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token string">'hat'</span><span class="token punctuation">,</span><span class="token string">'god'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">takeWhile</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">o</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Seq [ 'dog', 'frog' ]</span></code></p>
10:T4ce,<p><code class="codeBlock"><span class="token qualifier">Seq</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">,</span><span class="token string">'frog'</span><span class="token punctuation">,</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token string">'hat'</span><span class="token punctuation">,</span><span class="token string">'god'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">takeUntil</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">at</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// ['dog', 'frog']</span></code></p>
12:["version","v3.8.1","d"]
13:["type","Iterable.Indexed","d"]
0:["XT7YSMMLdh0TOF8yI1quU",[[["",{"children":["docs",{"children":[["version","v3.8.1","d"],{"children":[["type","Iterable.Indexed","d"],{"children":["__PAGE__?{\"version\":\"v3.8.1\",\"type\":\"Iterable.Indexed\"}",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":[["version","v3.8.1","d"],{"children":[["type","Iterable.Indexed","d"],{"children":["__PAGE__",{},["$L1",["$","$L2",null,{"def":{"qualifiedName":"Iterable.Indexed","doc":{"synopsis":"<p>Indexed Iterables have incrementing numeric keys. They exhibit\nslightly different behavior than <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol/Keyed\" target=\"_blank\" rel=\"noopener\">Iterable.Keyed</a></code> for some methods in order\nto better mirror the behavior of JavaScript&#39;s <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array</a></code>, and add methods\nwhich do not make sense on non-indexed Iterables such as <code><a href=\"/docs/v3.8.1/Iterable.Indexed#indexOf()\">indexOf</a></code>.</p>\n","description":"<p>Unlike JavaScript arrays, <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol/Indexed\" target=\"_blank\" rel=\"noopener\">Iterable.Indexed</a></code>s are always dense. &quot;Unset&quot;\nindices and <code><span class=\"token primitive\">undefined</span></code> indices are indistinguishable, and all indices from\n0 to <code>size</code> are visited when iterated.</p>\n<p>All Iterable.Indexed methods return re-indexed Iterables. In other words,\nindices always start at 0 and increment until size. If you wish to\npreserve indices, using them as keys, convert to a Iterable.Keyed by\ncalling <code><a href=\"/docs/v3.8.1/Iterable.Indexed#toKeyedSeq()\">toKeyedSeq</a></code>.</p>\n","notes":[]},"call":{"name":"Iterable.Indexed","label":"Iterable.Indexed()","id":"Iterable.Indexed()","signatures":[{"line":1496,"typeParams":["T"],"params":[{"name":"iter","type":{"k":12,"name":"Iterable.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/v3.8.1/Iterable.Indexed"}}],"type":{"k":12,"name":"Iterable.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/v3.8.1/Iterable.Indexed"}},{"line":1497,"typeParams":["T"],"params":[{"name":"iter","type":{"k":12,"name":"Iterable.Set","args":[{"k":11,"param":"T"}],"url":"/docs/v3.8.1/Iterable.Set"}}],"type":{"k":12,"name":"Iterable.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/v3.8.1/Iterable.Indexed"}},{"line":1498,"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":12,"name":"Iterable.Keyed","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v3.8.1/Iterable.Keyed"}}],"type":{"k":12,"name":"Iterable.Indexed","args":[{"k":1}],"url":"/docs/v3.8.1/Iterable.Indexed"}},{"line":1499,"typeParams":["T"],"params":[{"name":"array","type":{"k":12,"name":"Array","args":[{"k":11,"param":"T"}]}}],"type":{"k":12,"name":"Iterable.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/v3.8.1/Iterable.Indexed"}},{"line":1500,"typeParams":["T"],"params":[{"name":"iterator","type":{"k":12,"name":"Iterator","args":[{"k":11,"param":"T"}]}}],"type":{"k":12,"name":"Iterable.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/v3.8.1/Iterable.Indexed"}},{"line":1501,"typeParams":["T"],"params":[{"name":"iterable","type":{"k":12,"name":"Object"}}],"type":{"k":12,"name":"Iterable.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/v3.8.1/Iterable.Indexed"}}],"url":"/docs/v3.8.1/Iterable.Indexed#Iterable.Indexed()"},"interface":{"members":{"get":{"name":"get","label":"get()","id":"get()","group":"Reading values","doc":{"synopsis":"<p>Returns the value associated with the provided index, or notSetValue if\nthe index is beyond the bounds of the Iterable.</p>\n","description":"<p><code><span class=\"t param\">index</span></code> may be a negative number, which indexes back from the end of the\nIterable. <code>s<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code> gets the last item in the Iterable.</p>\n","notes":[]},"signatures":[{"line":1514,"params":[{"name":"index","type":{"k":6}},{"name":"notSetValue","type":{"k":11,"param":"T"},"optional":true}],"type":{"k":11,"param":"T"}}],"url":"/docs/v3.8.1/Iterable.Indexed#get()","overrides":{"interface":"Iterable","label":"get()","url":"/docs/v3.8.1/Iterable#get()"}},"toSeq":{"name":"toSeq","label":"toSeq()","id":"toSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns Seq.Indexed.</p>\n","description":"","notes":[]},"signatures":[{"line":1523,"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/v3.8.1/Seq.Indexed"}}],"url":"/docs/v3.8.1/Iterable.Indexed#toSeq()","overrides":{"interface":"Iterable","label":"toSeq()","url":"/docs/v3.8.1/Iterable#toSeq()"}},"fromEntrySeq":{"name":"fromEntrySeq","label":"fromEntrySeq()","id":"fromEntrySeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>If this is an iterable of [key, value] entry tuples, it will return a\nSeq.Keyed of those entries.</p>\n","description":"","notes":[]},"signatures":[{"line":1529,"type":{"k":12,"name":"Seq.Keyed","args":[{"k":1},{"k":1}],"url":"/docs/v3.8.1/Seq.Keyed"}}],"url":"/docs/v3.8.1/Iterable.Indexed#fromEntrySeq()"},"interpose":{"name":"interpose","label":"interpose()","id":"interpose()","group":"Combination","doc":{"synopsis":"<p>Returns an Iterable of the same type with <code><span class=\"t param\">separator</span></code> between each item\nin this Iterable.</p>\n","description":"","notes":[]},"signatures":[{"line":1538,"params":[{"name":"separator","type":{"k":11,"param":"T"}}],"type":{"k":12,"name":"Iterable.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/v3.8.1/Iterable.Indexed"}}],"url":"/docs/v3.8.1/Iterable.Indexed#interpose()"},"interleave":{"name":"interleave","label":"interleave()","id":"interleave()","group":"Combination","doc":{"synopsis":"<p>Returns an Iterable of the same type with the provided <code><span class=\"t param\">iterables</span></code>\ninterleaved into this iterable.</p>\n","description":"$3","notes":[]},"signatures":[{"line":1558,"params":[{"name":"iterables","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Iterable","args":[{"k":1},{"k":11,"param":"T"}]}]},"varArgs":true}],"type":{"k":12,"name":"Iterable.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/v3.8.1/Iterable.Indexed"}}],"url":"/docs/v3.8.1/Iterable.Indexed#interleave()"},"splice":{"name":"splice","label":"splice()","id":"splice()","group":"Combination","doc":{"synopsis":"<p>Splice returns a new indexed Iterable by replacing a region of this\nIterable with new values. If values are not provided, it only skips the\nregion to be removed.</p>\n","description":"$4","notes":[]},"signatures":[{"line":1572,"params":[{"name":"index","type":{"k":6}},{"name":"removeNum","type":{"k":6}},{"name":"values","type":{"k":9,"type":{"k":1}},"varArgs":true}],"type":{"k":12,"name":"Iterable.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/v3.8.1/Iterable.Indexed"}}],"url":"/docs/v3.8.1/Iterable.Indexed#splice()"},"zip":{"name":"zip","label":"zip()","id":"zip()","group":"Combination","doc":{"synopsis":"<p>Returns an Iterable of the same type &quot;zipped&quot; with the provided\niterables.</p>\n","description":"$5","notes":[]},"signatures":[{"line":1589,"params":[{"name":"iterables","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Iterable","args":[{"k":1},{"k":1}]}]},"varArgs":true}],"type":{"k":12,"name":"Iterable.Indexed","args":[{"k":1}],"url":"/docs/v3.8.1/Iterable.Indexed"}}],"url":"/docs/v3.8.1/Iterable.Indexed#zip()"},"zipWith":{"name":"zipWith","label":"zipWith()","id":"zipWith()","group":"Combination","signatures":[{"line":1600,"typeParams":["U","Z"],"params":[{"name":"zipper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"otherValue","type":{"k":11,"param":"U"}}],"type":{"k":11,"param":"Z"}}},{"name":"otherIterable","type":{"k":12,"name":"Iterable","args":[{"k":1},{"k":11,"param":"U"}],"url":"/docs/v3.8.1/Iterable"}}],"type":{"k":12,"name":"Iterable.Indexed","args":[{"k":11,"param":"Z"}],"url":"/docs/v3.8.1/Iterable.Indexed"}},{"line":1604,"typeParams":["U","V","Z"],"params":[{"name":"zipper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"otherValue","type":{"k":11,"param":"U"}},{"name":"thirdValue","type":{"k":11,"param":"V"}}],"type":{"k":11,"param":"Z"}}},{"name":"otherIterable","type":{"k":12,"name":"Iterable","args":[{"k":1},{"k":11,"param":"U"}],"url":"/docs/v3.8.1/Iterable"}},{"name":"thirdIterable","type":{"k":12,"name":"Iterable","args":[{"k":1},{"k":11,"param":"V"}],"url":"/docs/v3.8.1/Iterable"}}],"type":{"k":12,"name":"Iterable.Indexed","args":[{"k":11,"param":"Z"}],"url":"/docs/v3.8.1/Iterable.Indexed"}},{"line":1609,"typeParams":["Z"],"params":[{"name":"zipper","type":{"k":10,"params":[{"name":"any","type":{"k":12,"name":"Array","args":[{"k":1}]},"varArgs":true}],"type":{"k":11,"param":"Z"}}},{"name":"iterables","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Iterable","args":[{"k":1},{"k":1}]}]},"varArgs":true}],"type":{"k":12,"name":"Iterable.Indexed","args":[{"k":11,"param":"Z"}],"url":"/docs/v3.8.1/Iterable.Indexed"}}],"url":"/docs/v3.8.1/Iterable.Indexed#zipWith()"},"indexOf":{"name":"indexOf","label":"indexOf()","id":"indexOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the first index at which a given value can be found in the\nIterable, or -1 if it is not present.</p>\n","description":"","notes":[]},"signatures":[{"line":1621,"params":[{"name":"searchValue","type":{"k":11,"param":"T"}}],"type":{"k":6}}],"url":"/docs/v3.8.1/Iterable.Indexed#indexOf()"},"lastIndexOf":{"name":"lastIndexOf","label":"lastIndexOf()","id":"lastIndexOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the last index at which a given value can be found in the\nIterable, or -1 if it is not present.</p>\n","description":"","notes":[]},"signatures":[{"line":1627,"params":[{"name":"searchValue","type":{"k":11,"param":"T"}}],"type":{"k":6}}],"url":"/docs/v3.8.1/Iterable.Indexed#lastIndexOf()"},"findIndex":{"name":"findIndex","label":"findIndex()","id":"findIndex()","group":"Search for value","doc":{"synopsis":"<p>Returns the first index in the Iterable where a value satisfies the\nprovided predicate function. Otherwise -1 is returned.</p>\n","description":"","notes":[]},"signatures":[{"line":1633,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"},"optional":true},{"name":"index","type":{"k":6},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable.Indexed","args":[{"k":11,"param":"T"}]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":6}}],"url":"/docs/v3.8.1/Iterable.Indexed#findIndex()"},"findLastIndex":{"name":"findLastIndex","label":"findLastIndex()","id":"findLastIndex()","group":"Search for value","doc":{"synopsis":"<p>Returns the last index in the Iterable where a value satisfies the\nprovided predicate function. Otherwise -1 is returned.</p>\n","description":"","notes":[]},"signatures":[{"line":1642,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"},"optional":true},{"name":"index","type":{"k":6},"optional":true},{"name":"iter","type":{"k":12,"name":"Iterable.Indexed","args":[{"k":11,"param":"T"}]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":6}}],"url":"/docs/v3.8.1/Iterable.Indexed#findLastIndex()"},"equals":{"name":"equals","label":"equals()","id":"equals()","group":"Value equality","doc":{"synopsis":"<p>True if this and the other Iterable have value equality, as defined\nby <code><a href=\"/docs/v3.8.1/is()\">Immutable.is()</a></code>.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token qualifier\">Immutable</span><span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span></code>, but provided to\nallow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":1717,"params":[{"name":"other","type":{"k":12,"name":"Iterable","args":[{"k":6},{"k":11,"param":"T"}],"url":"/docs/v3.8.1/Iterable"}}],"type":{"k":5}}],"url":"/docs/v3.8.1/Iterable.Indexed#equals()","inherited":{"interface":"Iterable","label":"equals()","url":"/docs/v3.8.1/Iterable#equals()"}},"hashCode":{"name":"hashCode","label":"hashCode()","id":"hashCode()","group":"Value equality","doc":{"synopsis":"<p>Computes and returns the hashed identity for this Iterable.</p>\n","description":"$6","notes":[]},"signatures":[{"line":1738,"type":{"k":6}}],"url":"/docs/v3.8.1/Iterable.Indexed#hashCode()","inherited":{"interface":"Iterable","label":"hashCode()","url":"/docs/v3.8.1/Iterable#hashCode()"}},"has":{"name":"has","label":"has()","id":"has()","group":"Reading values","doc":{"synopsis":"<p>True if a key exists within this <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\" target=\"_blank\" rel=\"noopener\">Iterable</a></code>, using <code><a href=\"/docs/v3.8.1/is()\">Immutable.is</a></code> to determine equality</p>\n","description":"","notes":[]},"signatures":[{"line":1756,"params":[{"name":"key","type":"$7"}],"type":{"k":5}}],"url":"/docs/v3.8.1/Iterable.Indexed#has()","inherited":{"interface":"Iterable","label":"has()","url":"/docs/v3.8.1/Iterable#has()"}},"includes":{"name":"includes","label":"includes()","id":"includes()","group":"Reading values","doc":{"synopsis":"<p>True if a value exists within this <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\" target=\"_blank\" rel=\"noopener\">Iterable</a></code>, using <code><a href=\"/docs/v3.8.1/is()\">Immutable.is</a></code> to determine equality</p>\n","description":"","notes":[{"name":"alias","body":"contains"}]},"signatures":[{"line":1762,"params":[{"name":"value","type":"$8"}],"type":{"k":5}}],"url":"/docs/v3.8.1/Iterable.Indexed#includes()","inherited":{"interface":"Iterable","label":"includes()","url":"/docs/v3.8.1/Iterable#includes()"}},"first":{"name":"first","label":"first()","id":"first()","group":"Reading values","doc":{"synopsis":"<p>The first value in the Iterable.</p>\n","description":"","notes":[]},"signatures":[{"line":1768,"type":"$8"}],"url":"/docs/v3.8.1/Iterable.Indexed#first()","inherited":{"interface":"Iterable","label":"first()","url":"/docs/v3.8.1/Iterable#first()"}},"last":{"name":"last","label":"last()","id":"last()","group":"Reading values","doc":{"synopsis":"<p>The last value in the Iterable.</p>\n","description":"","notes":[]},"signatures":[{"line":1773,"type":"$8"}],"url":"/docs/v3.8.1/Iterable.Indexed#last()","inherited":{"interface":"Iterable","label":"last()","url":"/docs/v3.8.1/Iterable#last()"}},"getIn":{"name":"getIn","label":"getIn()","id":"getIn()","group":"Reading deep values","signatures":[{"line":1782,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Array","args":[{"k":1}]}},{"name":"notSetValue","type":{"k":1},"optional":true}],"type":{"k":1}},{"line":1783,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Iterable","args":[{"k":1},{"k":1}],"url":"/docs/v3.8.1/Iterable"}},{"name":"notSetValue","type":{"k":1},"optional":true}],"type":{"k":1}}],"url":"/docs/v3.8.1/Iterable.Indexed#getIn()","inherited":{"interface":"Iterable","label":"getIn()","url":"/docs/v3.8.1/Iterable#getIn()"}},"hasIn":{"name":"hasIn","label":"hasIn()","id":"hasIn()","group":"Reading deep values","signatures":[{"line":1789,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Array","args":[{"k":1}]}}],"type":{"k":5}},{"line":1790,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Iterable","args":[{"k":1},{"k":1}],"url":"/docs/v3.8.1/Iterable"}}],"type":{"k":5}}],"url":"/docs/v3.8.1/Iterable.Indexed#hasIn()","inherited":{"interface":"Iterable","label":"hasIn()","url":"/docs/v3.8.1/Iterable#hasIn()"}},"toJS":{"name":"toJS","label":"toJS()","id":"toJS()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Deeply converts this Iterable to equivalent JS.</p>\n","description":"<p><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol/Indexeds\" target=\"_blank\" rel=\"noopener\">Iterable.Indexeds</a></code>, and <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol/Sets\" target=\"_blank\" rel=\"noopener\">Iterable.Sets</a></code> become Arrays, while\n<code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol/Keyeds\" target=\"_blank\" rel=\"noopener\">Iterable.Keyeds</a></code> become Objects.</p>\n","notes":[{"name":"alias","body":"toJSON"}]},"signatures":[{"line":1803,"type":{"k":1}}],"url":"/docs/v3.8.1/Iterable.Indexed#toJS()","inherited":{"interface":"Iterable","label":"toJS()","url":"/docs/v3.8.1/Iterable#toJS()"}},"toArray":{"name":"toArray","label":"toArray()","id":"toArray()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this iterable to an Array, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":1808,"type":{"k":12,"name":"Array","args":["$8"]}}],"url":"/docs/v3.8.1/Iterable.Indexed#toArray()","inherited":{"interface":"Iterable","label":"toArray()","url":"/docs/v3.8.1/Iterable#toArray()"}},"toObject":{"name":"toObject","label":"toObject()","id":"toObject()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this Iterable to an Object.</p>\n","description":"<p>Throws if keys are not strings.</p>\n","notes":[]},"signatures":[{"line":1815,"type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":"$8"}]}}],"url":"/docs/v3.8.1/Iterable.Indexed#toObject()","inherited":{"interface":"Iterable","label":"toObject()","url":"/docs/v3.8.1/Iterable#toObject()"}},"toMap":{"name":"toMap","label":"toMap()","id":"toMap()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Iterable to a Map, Throws if keys are not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toKeyedSeq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":1826,"type":{"k":12,"name":"Map","args":["$7","$8"],"url":"/docs/v3.8.1/Map"}}],"url":"/docs/v3.8.1/Iterable.Indexed#toMap()","inherited":{"interface":"Iterable","label":"toMap()","url":"/docs/v3.8.1/Iterable#toMap()"}},"toOrderedMap":{"name":"toOrderedMap","label":"toOrderedMap()","id":"toOrderedMap()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Iterable to a Map, maintaining the order of iteration.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\">OrderedMap</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toKeyedSeq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":1834,"type":{"k":12,"name":"OrderedMap","args":["$7","$8"],"url":"/docs/v3.8.1/OrderedMap"}}],"url":"/docs/v3.8.1/Iterable.Indexed#toOrderedMap()","inherited":{"interface":"Iterable","label":"toOrderedMap()","url":"/docs/v3.8.1/Iterable#toOrderedMap()"}},"toSet":{"name":"toSet","label":"toSet()","id":"toSet()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Iterable to a Set, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><a href=\"/docs/v3.8.1/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n","notes":[]},"signatures":[{"line":1843,"type":{"k":12,"name":"Set","args":["$8"],"url":"/docs/v3.8.1/Set"}}],"url":"/docs/v3.8.1/Iterable.Indexed#toSet()","inherited":{"interface":"Iterable","label":"toSet()","url":"/docs/v3.8.1/Iterable#toSet()"}},"toOrderedSet":{"name":"toOrderedSet","label":"toOrderedSet()","id":"toOrderedSet()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Iterable to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\">OrderedSet</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueSeq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":1852,"type":{"k":12,"name":"OrderedSet","args":["$8"],"url":"/docs/v3.8.1/OrderedSet"}}],"url":"/docs/v3.8.1/Iterable.Indexed#toOrderedSet()","inherited":{"interface":"Iterable","label":"toOrderedSet()","url":"/docs/v3.8.1/Iterable#toOrderedSet()"}},"toList":{"name":"toList","label":"toList()","id":"toList()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Iterable to a List, discarding keys.</p>\n","description":"<p>Note: This is equivalent to <code><a href=\"/docs/v3.8.1/List\">List(this)</a></code>, but provided to allow\nfor chained expressions.</p>\n","notes":[]},"signatures":[{"line":1860,"type":{"k":12,"name":"List","args":["$8"],"url":"/docs/v3.8.1/List"}}],"url":"/docs/v3.8.1/Iterable.Indexed#toList()","inherited":{"interface":"Iterable","label":"toList()","url":"/docs/v3.8.1/Iterable#toList()"}},"toStack":{"name":"toStack","label":"toStack()","id":"toStack()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Iterable to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><a href=\"/docs/v3.8.1/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n","notes":[]},"signatures":[{"line":1869,"type":{"k":12,"name":"Stack","args":["$8"],"url":"/docs/v3.8.1/Stack"}}],"url":"/docs/v3.8.1/Iterable.Indexed#toStack()","inherited":{"interface":"Iterable","label":"toStack()","url":"/docs/v3.8.1/Iterable#toStack()"}},"toKeyedSeq":{"name":"toKeyedSeq","label":"toKeyedSeq()","id":"toKeyedSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns a Seq.Keyed from this Iterable where indices are treated as keys.</p>\n","description":"$9","notes":[]},"signatures":[{"line":1897,"type":{"k":12,"name":"Seq.Keyed","args":["$7","$8"],"url":"/docs/v3.8.1/Seq.Keyed"}}],"url":"/docs/v3.8.1/Iterable.Indexed#toKeyedSeq()","inherited":{"interface":"Iterable","label":"toKeyedSeq()","url":"/docs/v3.8.1/Iterable#toKeyedSeq()"}},"toIndexedSeq":{"name":"toIndexedSeq","label":"toIndexedSeq()","id":"toIndexedSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns an Seq.Indexed of the values of this Iterable, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":1902,"type":{"k":12,"name":"Seq.Indexed","args":["$8"],"url":"/docs/v3.8.1/Seq.Indexed"}}],"url":"/docs/v3.8.1/Iterable.Indexed#toIndexedSeq()","inherited":{"interface":"Iterable","label":"toIndexedSeq()","url":"/docs/v3.8.1/Iterable#toIndexedSeq()"}},"toSetSeq":{"name":"toSetSeq","label":"toSetSeq()","id":"toSetSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns a Seq.Set of the values of this Iterable, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":1907,"type":{"k":12,"name":"Seq.Set","args":["$8"],"url":"/docs/v3.8.1/Seq.Set"}}],"url":"/docs/v3.8.1/Iterable.Indexed#toSetSeq()","inherited":{"interface":"Iterable","label":"toSetSeq()","url":"/docs/v3.8.1/Iterable#toSetSeq()"}},"keys":{"name":"keys","label":"keys()","id":"keys()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\" target=\"_blank\" rel=\"noopener\">Iterable</a></code>&#39;s keys.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support Immutable JS sequence algorithms. Use <code><a href=\"/docs/v3.8.1/List#keySeq()\">keySeq</a></code> instead, if this is what you want.</p>\n","notes":[]},"signatures":[{"line":1917,"type":{"k":12,"name":"Iterator","args":["$7"]}}],"url":"/docs/v3.8.1/Iterable.Indexed#keys()","inherited":{"interface":"Iterable","label":"keys()","url":"/docs/v3.8.1/Iterable#keys()"}},"values":{"name":"values","label":"values()","id":"values()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\" target=\"_blank\" rel=\"noopener\">Iterable</a></code>&#39;s values.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support Immutable JS sequence algorithms. Use <code><a href=\"/docs/v3.8.1/List#valueSeq()\">valueSeq</a></code> instead, if this is what you want.</p>\n","notes":[]},"signatures":[{"line":1924,"type":{"k":12,"name":"Iterator","args":["$8"]}}],"url":"/docs/v3.8.1/Iterable.Indexed#values()","inherited":{"interface":"Iterable","label":"values()","url":"/docs/v3.8.1/Iterable#values()"}},"entries":{"name":"entries","label":"entries()","id":"entries()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\" target=\"_blank\" rel=\"noopener\">Iterable</a></code>&#39;s entries as <code><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></code> tuples.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support Immutable JS sequence algorithms. Use <code><a href=\"/docs/v3.8.1/List#entrySeq()\">entrySeq</a></code> instead, if this is what you want.</p>\n","notes":[]},"signatures":[{"line":1931,"type":{"k":12,"name":"Iterator","args":[{"k":12,"name":"Array","args":[{"k":1}]}]}}],"url":"/docs/v3.8.1/Iterable.Indexed#entries()","inherited":{"interface":"Iterable","label":"entries()","url":"/docs/v3.8.1/Iterable#entries()"}},"keySeq":{"name":"keySeq","label":"keySeq()","id":"keySeq()","group":"Iterables (Seq)","doc":{"synopsis":"<p>Returns a new Seq.Indexed of the keys of this Iterable,\ndiscarding values.</p>\n","description":"","notes":[]},"signatures":[{"line":1940,"type":{"k":12,"name":"Seq.Indexed","args":["$7"],"url":"/docs/v3.8.1/Seq.Indexed"}}],"url":"/docs/v3.8.1/Iterable.Indexed#keySeq()","inherited":{"interface":"Iterable","label":"keySeq()","url":"/docs/v3.8.1/Iterable#keySeq()"}},"valueSeq":{"name":"valueSeq","label":"valueSeq()","id":"valueSeq()","group":"Iterables (Seq)","doc":{"synopsis":"<p>Returns an Seq.Indexed of the values of this Iterable, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":1945,"type":{"k":12,"name":"Seq.Indexed","args":["$8"],"url":"/docs/v3.8.1/Seq.Indexed"}}],"url":"/docs/v3.8.1/Iterable.Indexed#valueSeq()","inherited":{"interface":"Iterable","label":"valueSeq()","url":"/docs/v3.8.1/Iterable#valueSeq()"}},"entrySeq":{"name":"entrySeq","label":"entrySeq()","id":"entrySeq()","group":"Iterables (Seq)","doc":{"synopsis":"<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n","description":"","notes":[]},"signatures":[{"line":1950,"type":{"k":12,"name":"Seq.Indexed","args":[{"k":12,"name":"Array","args":[{"k":1}]}],"url":"/docs/v3.8.1/Seq.Indexed"}}],"url":"/docs/v3.8.1/Iterable.Indexed#entrySeq()","inherited":{"interface":"Iterable","label":"entrySeq()","url":"/docs/v3.8.1/Iterable#entrySeq()"}},"map":{"name":"map","label":"map()","id":"map()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Iterable of the same type with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token function\">Seq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Seq { a: 10, b: 20 }</span></code></p>\n","notes":[]},"signatures":[{"line":1963,"typeParams":["M"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":11,"param":"M"}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Iterable","args":["$7",{"k":11,"param":"M"}],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#map()","inherited":{"interface":"Iterable","label":"map()","url":"/docs/v3.8.1/Iterable#map()"}},"filter":{"name":"filter","label":"filter()","id":"filter()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Iterable of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns true.</p>\n","description":"$a","notes":[]},"signatures":[{"line":1976,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Iterable","args":["$7","$8"],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#filter()","inherited":{"interface":"Iterable","label":"filter()","url":"/docs/v3.8.1/Iterable#filter()"}},"filterNot":{"name":"filterNot","label":"filterNot()","id":"filterNot()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Iterable of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n","description":"$b","notes":[]},"signatures":[{"line":1989,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Iterable","args":["$7","$8"],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#filterNot()","inherited":{"interface":"Iterable","label":"filterNot()","url":"/docs/v3.8.1/Iterable#filterNot()"}},"reverse":{"name":"reverse","label":"reverse()","id":"reverse()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Iterable of the same type in reverse order.</p>\n","description":"","notes":[]},"signatures":[{"line":1997,"type":{"k":12,"name":"Iterable","args":["$7","$8"],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#reverse()","inherited":{"interface":"Iterable","label":"reverse()","url":"/docs/v3.8.1/Iterable#reverse()"}},"sort":{"name":"sort","label":"sort()","id":"sort()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Iterable of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n","description":"$c","notes":[]},"signatures":[{"line":2016,"params":[{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":"$8"},{"name":"valueB","type":"$8"}],"type":{"k":6}},"optional":true}],"type":{"k":12,"name":"Iterable","args":["$7","$8"],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#sort()","inherited":{"interface":"Iterable","label":"sort()","url":"/docs/v3.8.1/Iterable#sort()"}},"sortBy":{"name":"sortBy","label":"sortBy()","id":"sortBy()","group":"Sequence algorithms","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v3.8.1/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n","description":"<p><code class=\"codeBlock\">hitters<span class=\"token punctuation\">.</span><span class=\"token function\">sortBy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hitter</span> <span class=\"token operator\">=></span> hitter<span class=\"token punctuation\">.</span>avgHits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></p>\n","notes":[]},"signatures":[{"line":2025,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"C"}},{"name":"valueB","type":{"k":11,"param":"C"}}],"type":{"k":6}},"optional":true}],"type":{"k":12,"name":"Iterable","args":["$7","$8"],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#sortBy()","inherited":{"interface":"Iterable","label":"sortBy()","url":"/docs/v3.8.1/Iterable#sortBy()"}},"groupBy":{"name":"groupBy","label":"groupBy()","id":"groupBy()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol/Keyed\" target=\"_blank\" rel=\"noopener\">Iterable.Keyed</a></code> of <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol/Keyeds\" target=\"_blank\" rel=\"noopener\">Iterable.Keyeds</a></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n","description":"<p>Note: This is always an eager operation.</p>\n","notes":[]},"signatures":[{"line":2036,"typeParams":["G"],"params":[{"name":"grouper","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":11,"param":"G"}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Seq.Keyed","args":[{"k":11,"param":"G"},{"k":12,"name":"Iterable","args":["$7","$8"]}],"url":"/docs/v3.8.1/Seq.Keyed"}}],"url":"/docs/v3.8.1/Iterable.Indexed#groupBy()","inherited":{"interface":"Iterable","label":"groupBy()","url":"/docs/v3.8.1/Iterable#groupBy()"}},"forEach":{"name":"forEach","label":"forEach()","id":"forEach()","group":"Side effects","doc":{"synopsis":"<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Iterable.</p>\n","description":"<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\">false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n","notes":[]},"signatures":[{"line":2051,"params":[{"name":"sideEffect","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":1}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":6}}],"url":"/docs/v3.8.1/Iterable.Indexed#forEach()","inherited":{"interface":"Iterable","label":"forEach()","url":"/docs/v3.8.1/Iterable#forEach()"}},"slice":{"name":"slice","label":"slice()","id":"slice()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type representing a portion of this\nIterable from start up to but not including end.</p>\n","description":"<p>If begin is negative, it is offset from the end of the Iterable. e.g.\n<code><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code> returns a Iterable of the last two entries. If it is not\nprovided the new Iterable will begin at the beginning of this Iterable.</p>\n<p>If end is negative, it is offset from the end of the Iterable. e.g.\n<code><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code> returns an Iterable of everything but the last entry. If\nit is not provided, the new Iterable will continue through the end of\nthis Iterable.</p>\n<p>If the requested slice is equivalent to the current Iterable, then it\nwill return itself.</p>\n","notes":[]},"signatures":[{"line":2075,"params":[{"name":"begin","type":{"k":6},"optional":true},{"name":"end","type":{"k":6},"optional":true}],"type":{"k":12,"name":"Iterable","args":["$7","$8"],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#slice()","inherited":{"interface":"Iterable","label":"slice()","url":"/docs/v3.8.1/Iterable#slice()"}},"rest":{"name":"rest","label":"rest()","id":"rest()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type containing all entries except\nthe first.</p>\n","description":"","notes":[]},"signatures":[{"line":2081,"type":{"k":12,"name":"Iterable","args":["$7","$8"],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#rest()","inherited":{"interface":"Iterable","label":"rest()","url":"/docs/v3.8.1/Iterable#rest()"}},"butLast":{"name":"butLast","label":"butLast()","id":"butLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type containing all entries except\nthe last.</p>\n","description":"","notes":[]},"signatures":[{"line":2087,"type":{"k":12,"name":"Iterable","args":["$7","$8"],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#butLast()","inherited":{"interface":"Iterable","label":"butLast()","url":"/docs/v3.8.1/Iterable#butLast()"}},"skip":{"name":"skip","label":"skip()","id":"skip()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Iterable.</p>\n","description":"","notes":[]},"signatures":[{"line":2093,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":12,"name":"Iterable","args":["$7","$8"],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#skip()","inherited":{"interface":"Iterable","label":"skip()","url":"/docs/v3.8.1/Iterable#skip()"}},"skipLast":{"name":"skipLast","label":"skipLast()","id":"skipLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Iterable.</p>\n","description":"","notes":[]},"signatures":[{"line":2099,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":12,"name":"Iterable","args":["$7","$8"],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#skipLast()","inherited":{"interface":"Iterable","label":"skipLast()","url":"/docs/v3.8.1/Iterable#skipLast()"}},"skipWhile":{"name":"skipWhile","label":"skipWhile()","id":"skipWhile()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n","description":"$d","notes":[]},"signatures":[{"line":2110,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Iterable","args":["$7","$8"],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#skipWhile()","inherited":{"interface":"Iterable","label":"skipWhile()","url":"/docs/v3.8.1/Iterable#skipWhile()"}},"skipUntil":{"name":"skipUntil","label":"skipUntil()","id":"skipUntil()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n","description":"$e","notes":[]},"signatures":[{"line":2124,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Iterable","args":["$7","$8"],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#skipUntil()","inherited":{"interface":"Iterable","label":"skipUntil()","url":"/docs/v3.8.1/Iterable#skipUntil()"}},"take":{"name":"take","label":"take()","id":"take()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Iterable.</p>\n","description":"","notes":[]},"signatures":[{"line":2133,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":12,"name":"Iterable","args":["$7","$8"],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#take()","inherited":{"interface":"Iterable","label":"take()","url":"/docs/v3.8.1/Iterable#take()"}},"takeLast":{"name":"takeLast","label":"takeLast()","id":"takeLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Iterable.</p>\n","description":"","notes":[]},"signatures":[{"line":2139,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":12,"name":"Iterable","args":["$7","$8"],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#takeLast()","inherited":{"interface":"Iterable","label":"takeLast()","url":"/docs/v3.8.1/Iterable#takeLast()"}},"takeWhile":{"name":"takeWhile","label":"takeWhile()","id":"takeWhile()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type which includes entries from this\nIterable as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"$f","notes":[]},"signatures":[{"line":2150,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Iterable","args":["$7","$8"],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#takeWhile()","inherited":{"interface":"Iterable","label":"takeWhile()","url":"/docs/v3.8.1/Iterable#takeWhile()"}},"takeUntil":{"name":"takeUntil","label":"takeUntil()","id":"takeUntil()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Iterable of the same type which includes entries from this\nIterable as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n","description":"$10","notes":[]},"signatures":[{"line":2163,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Iterable","args":["$7","$8"],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#takeUntil()","inherited":{"interface":"Iterable","label":"takeUntil()","url":"/docs/v3.8.1/Iterable#takeUntil()"}},"concat":{"name":"concat","label":"concat()","id":"concat()","group":"Combination","doc":{"synopsis":"<p>Returns a new Iterable of the same type with other values and\niterable-like concatenated to this one.</p>\n","description":"<p>For Seqs, all entries will be present in\nthe resulting iterable, even if they have the same key.</p>\n","notes":[]},"signatures":[{"line":2178,"params":[{"name":"valuesOrIterables","type":{"k":9,"type":{"k":1}},"varArgs":true}],"type":{"k":12,"name":"Iterable","args":["$7","$8"],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#concat()","inherited":{"interface":"Iterable","label":"concat()","url":"/docs/v3.8.1/Iterable#concat()"}},"flatten":{"name":"flatten","label":"flatten()","id":"flatten()","group":"Combination","signatures":[{"line":2193,"params":[{"name":"depth","type":{"k":6},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":1},{"k":1}],"url":"/docs/v3.8.1/Iterable"}},{"line":2194,"params":[{"name":"shallow","type":{"k":5},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":1},{"k":1}],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#flatten()","inherited":{"interface":"Iterable","label":"flatten()","url":"/docs/v3.8.1/Iterable#flatten()"}},"flatMap":{"name":"flatMap","label":"flatMap()","id":"flatMap()","group":"Combination","signatures":[{"line":2201,"typeParams":["MK","MV"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"MK"},{"k":11,"param":"MV"}]}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"MK"},{"k":11,"param":"MV"}],"url":"/docs/v3.8.1/Iterable"}},{"line":2205,"typeParams":["MK","MV"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":1}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"MK"},{"k":11,"param":"MV"}],"url":"/docs/v3.8.1/Iterable"}}],"url":"/docs/v3.8.1/Iterable.Indexed#flatMap()","inherited":{"interface":"Iterable","label":"flatMap()","url":"/docs/v3.8.1/Iterable#flatMap()"}},"reduce":{"name":"reduce","label":"reduce()","id":"reduce()","group":"Reducing a value","doc":{"synopsis":"<p>Reduces the Iterable to a value by calling the <code><span class=\"t param\">reducer</span></code> for every entry\nin the Iterable and passing along the reduced value.</p>\n","description":"<p>If <code><span class=\"t param\">initialReduction</span></code> is not provided, or is null, the first item in the\nIterable will be used.</p>\n","notes":[{"name":"see","body":"<p><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\" target=\"_blank\" rel=\"noopener\">Array#reduce</a></code>.</p>\n"}]},"signatures":[{"line":2222,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":11,"param":"R"},"optional":true},{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":11,"param":"R"}}},{"name":"initialReduction","type":{"k":11,"param":"R"},"optional":true},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":11,"param":"R"}}],"url":"/docs/v3.8.1/Iterable.Indexed#reduce()","inherited":{"interface":"Iterable","label":"reduce()","url":"/docs/v3.8.1/Iterable#reduce()"}},"reduceRight":{"name":"reduceRight","label":"reduceRight()","id":"reduceRight()","group":"Reducing a value","doc":{"synopsis":"<p>Reduces the Iterable in reverse (from the right side).</p>\n","description":"<p>Note: Similar to this.reverse().reduce(), and provided for parity\nwith <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\" target=\"_blank\" rel=\"noopener\">Array#reduceRight</a></code>.</p>\n","notes":[]},"signatures":[{"line":2234,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":11,"param":"R"},"optional":true},{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":11,"param":"R"}}},{"name":"initialReduction","type":{"k":11,"param":"R"},"optional":true},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":11,"param":"R"}}],"url":"/docs/v3.8.1/Iterable.Indexed#reduceRight()","inherited":{"interface":"Iterable","label":"reduceRight()","url":"/docs/v3.8.1/Iterable#reduceRight()"}},"every":{"name":"every","label":"every()","id":"every()","group":"Reducing a value","doc":{"synopsis":"<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Iterable.</p>\n","description":"","notes":[]},"signatures":[{"line":2243,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":5}}],"url":"/docs/v3.8.1/Iterable.Indexed#every()","inherited":{"interface":"Iterable","label":"every()","url":"/docs/v3.8.1/Iterable#every()"}},"some":{"name":"some","label":"some()","id":"some()","group":"Reducing a value","doc":{"synopsis":"<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Iterable.</p>\n","description":"","notes":[]},"signatures":[{"line":2251,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":5}}],"url":"/docs/v3.8.1/Iterable.Indexed#some()","inherited":{"interface":"Iterable","label":"some()","url":"/docs/v3.8.1/Iterable#some()"}},"join":{"name":"join","label":"join()","id":"join()","group":"Reducing a value","doc":{"synopsis":"<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\">\",\"</span></code>.</p>\n","description":"","notes":[]},"signatures":[{"line":2260,"params":[{"name":"separator","type":{"k":7},"optional":true}],"type":{"k":7}}],"url":"/docs/v3.8.1/Iterable.Indexed#join()","inherited":{"interface":"Iterable","label":"join()","url":"/docs/v3.8.1/Iterable#join()"}},"isEmpty":{"name":"isEmpty","label":"isEmpty()","id":"isEmpty()","group":"Reducing a value","doc":{"synopsis":"<p>Returns true if this Iterable includes no values.</p>\n","description":"<p>For some lazy <code><a href=\"/docs/v3.8.1/Seq\">Seq</a></code>, <code><a href=\"/docs/v3.8.1/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n","notes":[]},"signatures":[{"line":2268,"type":{"k":5}}],"url":"/docs/v3.8.1/Iterable.Indexed#isEmpty()","inherited":{"interface":"Iterable","label":"isEmpty()","url":"/docs/v3.8.1/Iterable#isEmpty()"}},"count":{"name":"count","label":"count()","id":"count()","group":"Reducing a value","signatures":[{"line":2280,"type":{"k":6}},{"line":2281,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":6}}],"url":"/docs/v3.8.1/Iterable.Indexed#count()","inherited":{"interface":"Iterable","label":"count()","url":"/docs/v3.8.1/Iterable#count()"}},"countBy":{"name":"countBy","label":"countBy()","id":"countBy()","group":"Reducing a value","doc":{"synopsis":"<p>Returns a <code><a href=\"/docs/v3.8.1/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n","description":"<p>Note: This is not a lazy operation.</p>\n","notes":[]},"signatures":[{"line":2292,"typeParams":["G"],"params":[{"name":"grouper","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":11,"param":"G"}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Map","args":[{"k":11,"param":"G"},{"k":6}],"url":"/docs/v3.8.1/Map"}}],"url":"/docs/v3.8.1/Iterable.Indexed#countBy()","inherited":{"interface":"Iterable","label":"countBy()","url":"/docs/v3.8.1/Iterable#countBy()"}},"find":{"name":"find","label":"find()","id":"find()","group":"Search for value","doc":{"synopsis":"<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":2303,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true},{"name":"notSetValue","type":"$8","optional":true}],"type":"$8"}],"url":"/docs/v3.8.1/Iterable.Indexed#find()","inherited":{"interface":"Iterable","label":"find()","url":"/docs/v3.8.1/Iterable#find()"}},"findLast":{"name":"findLast","label":"findLast()","id":"findLast()","group":"Search for value","doc":{"synopsis":"<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":2314,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true},{"name":"notSetValue","type":"$8","optional":true}],"type":"$8"}],"url":"/docs/v3.8.1/Iterable.Indexed#findLast()","inherited":{"interface":"Iterable","label":"findLast()","url":"/docs/v3.8.1/Iterable#findLast()"}},"findEntry":{"name":"findEntry","label":"findEntry()","id":"findEntry()","group":"Search for value","doc":{"synopsis":"<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":2323,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true},{"name":"notSetValue","type":"$8","optional":true}],"type":{"k":12,"name":"Array","args":[{"k":1}]}}],"url":"/docs/v3.8.1/Iterable.Indexed#findEntry()","inherited":{"interface":"Iterable","label":"findEntry()","url":"/docs/v3.8.1/Iterable#findEntry()"}},"findLastEntry":{"name":"findLastEntry","label":"findLastEntry()","id":"findLastEntry()","group":"Search for value","doc":{"synopsis":"<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":2335,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true},{"name":"notSetValue","type":"$8","optional":true}],"type":{"k":12,"name":"Array","args":[{"k":1}]}}],"url":"/docs/v3.8.1/Iterable.Indexed#findLastEntry()","inherited":{"interface":"Iterable","label":"findLastEntry()","url":"/docs/v3.8.1/Iterable#findLastEntry()"}},"findKey":{"name":"findKey","label":"findKey()","id":"findKey()","group":"Search for value","doc":{"synopsis":"<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":2344,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable.Keyed","args":["$7","$8"]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":"$7"}],"url":"/docs/v3.8.1/Iterable.Indexed#findKey()","inherited":{"interface":"Iterable","label":"findKey()","url":"/docs/v3.8.1/Iterable#findKey()"}},"findLastKey":{"name":"findLastKey","label":"findLastKey()","id":"findLastKey()","group":"Search for value","doc":{"synopsis":"<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":2354,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable.Keyed","args":["$7","$8"]},"optional":true}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":"$7"}],"url":"/docs/v3.8.1/Iterable.Indexed#findLastKey()","inherited":{"interface":"Iterable","label":"findLastKey()","url":"/docs/v3.8.1/Iterable#findLastKey()"}},"keyOf":{"name":"keyOf","label":"keyOf()","id":"keyOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the key associated with the search value, or undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":2362,"params":[{"name":"searchValue","type":"$8"}],"type":"$7"}],"url":"/docs/v3.8.1/Iterable.Indexed#keyOf()","inherited":{"interface":"Iterable","label":"keyOf()","url":"/docs/v3.8.1/Iterable#keyOf()"}},"lastKeyOf":{"name":"lastKeyOf","label":"lastKeyOf()","id":"lastKeyOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the last key associated with the search value, or undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":2367,"params":[{"name":"searchValue","type":"$8"}],"type":"$7"}],"url":"/docs/v3.8.1/Iterable.Indexed#lastKeyOf()","inherited":{"interface":"Iterable","label":"lastKeyOf()","url":"/docs/v3.8.1/Iterable#lastKeyOf()"}},"max":{"name":"max","label":"max()","id":"max()","group":"Search for value","doc":{"synopsis":"<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol/sort\" target=\"_blank\" rel=\"noopener\">Iterable#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\">></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/v3.8.1/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\">></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n","notes":[]},"signatures":[{"line":2384,"params":[{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":"$8"},{"name":"valueB","type":"$8"}],"type":{"k":6}},"optional":true}],"type":"$8"}],"url":"/docs/v3.8.1/Iterable.Indexed#max()","inherited":{"interface":"Iterable","label":"max()","url":"/docs/v3.8.1/Iterable#max()"}},"maxBy":{"name":"maxBy","label":"maxBy()","id":"maxBy()","group":"Search for value","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v3.8.1/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"<p><code class=\"codeBlock\">hitters<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hitter</span> <span class=\"token operator\">=></span> hitter<span class=\"token punctuation\">.</span>avgHits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></p>\n","notes":[]},"signatures":[{"line":2393,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"C"}},{"name":"valueB","type":{"k":11,"param":"C"}}],"type":{"k":6}},"optional":true}],"type":"$8"}],"url":"/docs/v3.8.1/Iterable.Indexed#maxBy()","inherited":{"interface":"Iterable","label":"maxBy()","url":"/docs/v3.8.1/Iterable#maxBy()"}},"min":{"name":"min","label":"min()","id":"min()","group":"Search for value","doc":{"synopsis":"<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol/sort\" target=\"_blank\" rel=\"noopener\">Iterable#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\">&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/v3.8.1/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\">&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n","notes":[]},"signatures":[{"line":2413,"params":[{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":"$8"},{"name":"valueB","type":"$8"}],"type":{"k":6}},"optional":true}],"type":"$8"}],"url":"/docs/v3.8.1/Iterable.Indexed#min()","inherited":{"interface":"Iterable","label":"min()","url":"/docs/v3.8.1/Iterable#min()"}},"minBy":{"name":"minBy","label":"minBy()","id":"minBy()","group":"Search for value","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v3.8.1/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"<p><code class=\"codeBlock\">hitters<span class=\"token punctuation\">.</span><span class=\"token function\">minBy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hitter</span> <span class=\"token operator\">=></span> hitter<span class=\"token punctuation\">.</span>avgHits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></p>\n","notes":[]},"signatures":[{"line":2422,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":"$8","optional":true},{"name":"key","type":"$7","optional":true},{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7","$8"]},"optional":true}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"C"}},{"name":"valueB","type":{"k":11,"param":"C"}}],"type":{"k":6}},"optional":true}],"type":"$8"}],"url":"/docs/v3.8.1/Iterable.Indexed#minBy()","inherited":{"interface":"Iterable","label":"minBy()","url":"/docs/v3.8.1/Iterable#minBy()"}},"isSubset":{"name":"isSubset","label":"isSubset()","id":"isSubset()","group":"Comparison","signatures":[{"line":2433,"params":[{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":1},"$8"],"url":"/docs/v3.8.1/Iterable"}}],"type":{"k":5}},{"line":2434,"params":[{"name":"iter","type":{"k":12,"name":"Array","args":["$8"]}}],"type":{"k":5}}],"url":"/docs/v3.8.1/Iterable.Indexed#isSubset()","inherited":{"interface":"Iterable","label":"isSubset()","url":"/docs/v3.8.1/Iterable#isSubset()"}},"isSuperset":{"name":"isSuperset","label":"isSuperset()","id":"isSuperset()","group":"Comparison","signatures":[{"line":2439,"params":[{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":1},"$8"],"url":"/docs/v3.8.1/Iterable"}}],"type":{"k":5}},{"line":2440,"params":[{"name":"iter","type":{"k":12,"name":"Array","args":["$8"]}}],"type":{"k":5}}],"url":"/docs/v3.8.1/Iterable.Indexed#isSuperset()","inherited":{"interface":"Iterable","label":"isSuperset()","url":"/docs/v3.8.1/Iterable#isSuperset()"}}},"line":1503,"typeParams":["T"],"extends":[{"k":12,"name":"Iterable","args":["$7","$8"],"url":"/docs/v3.8.1/Iterable"}]},"label":"Iterable.Indexed","url":"/docs/v3.8.1/Iterable.Indexed"},"sidebarLinks":[{"label":"fromJS()","url":"/docs/v3.8.1/fromJS()"},{"label":"is()","url":"/docs/v3.8.1/is()"},{"label":"List","url":"/docs/v3.8.1/List"},{"label":"Map","url":"/docs/v3.8.1/Map"},{"label":"OrderedMap","url":"/docs/v3.8.1/OrderedMap"},{"label":"Set","url":"/docs/v3.8.1/Set"},{"label":"OrderedSet","url":"/docs/v3.8.1/OrderedSet"},{"label":"Stack","url":"/docs/v3.8.1/Stack"},{"label":"Range()","url":"/docs/v3.8.1/Range()"},{"label":"Repeat()","url":"/docs/v3.8.1/Repeat()"},{"label":"Record()","url":"/docs/v3.8.1/Record()"},{"label":"Record.Class","url":"/docs/v3.8.1/Record.Class"},{"label":"Seq","url":"/docs/v3.8.1/Seq"},{"label":"Seq.Keyed","url":"/docs/v3.8.1/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/v3.8.1/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/v3.8.1/Seq.Set"},{"label":"Iterable","url":"/docs/v3.8.1/Iterable"},{"label":"Iterable.Keyed","url":"/docs/v3.8.1/Iterable.Keyed"},{"label":"Iterable.Indexed","url":"/docs/v3.8.1/Iterable.Indexed"},{"label":"Iterable.Set","url":"/docs/v3.8.1/Iterable.Set"},{"label":"Collection","url":"/docs/v3.8.1/Collection"},{"label":"Collection.Keyed","url":"/docs/v3.8.1/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/v3.8.1/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/v3.8.1/Collection.Set"}]}],null]]},["$","$L11",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$12","children","$13","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L14",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","div",null,{"children":[["$","$L15",null,{"version":"v3.8.1"}],["$","div",null,{"className":"header","children":["$","div",null,{"className":"miniHeader","children":["$","div",null,{"className":"miniHeaderContents","children":[["$","$L16",null,{}],["$","$L17",null,{"versions":["v4.0.0-rc.2","v3.8.1","latest@main"],"currentVersion":"v3.8.1"}]]}]}]}],["$","div",null,{"className":"pageBody","children":["$","div",null,{"className":"contents","children":["$","$L11",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$12","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L14",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}]}]]}],null]]},["$","$L11",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L14",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L11",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L14",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f4479af2108893f8.css","precedence":"next","crossOrigin":""}]],"$L18"]]]]
18:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Iterable.Indexed — Immutable.js"}],["$","link","3",{"rel":"icon","href":"/favicon.png"}]]
1:null
