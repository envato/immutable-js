2:I[6556,["346","static/chunks/346-c06e7efa10f5ccdb.js","609","static/chunks/app/docs/%5Bversion%5D/%5Btype%5D/page-1c0b3e03993b4b68.js"],"TypeDocumentation"]
11:I[103,[],""]
14:I[5885,[],""]
15:I[4063,["346","static/chunks/346-c06e7efa10f5ccdb.js","397","static/chunks/397-6dd2ff192d8a9ea9.js","15","static/chunks/15-ddea9c0dc1b2ecf5.js","356","static/chunks/app/docs/%5Bversion%5D/layout-3225f3df119af2cc.js"],"ImmutableConsole"]
16:I[914,["346","static/chunks/346-c06e7efa10f5ccdb.js","397","static/chunks/397-6dd2ff192d8a9ea9.js","15","static/chunks/15-ddea9c0dc1b2ecf5.js","356","static/chunks/app/docs/%5Bversion%5D/layout-3225f3df119af2cc.js"],"HeaderLogoLink"]
17:I[914,["346","static/chunks/346-c06e7efa10f5ccdb.js","397","static/chunks/397-6dd2ff192d8a9ea9.js","15","static/chunks/15-ddea9c0dc1b2ecf5.js","356","static/chunks/app/docs/%5Bversion%5D/layout-3225f3df119af2cc.js"],"HeaderLinks"]
3:T643,<p>Like <code><a href="/docs/v4.0.0-rc.2/OrderedSet#zipWith()">zipWith</a></code>, but using the default <code>zipper</code>: creating an <code><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">Array</a></code>.</p>
<code class="codeBlock"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">OrderedSet</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">OrderedSet</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token comment">// OrderedSet [ [ 1, 4 ], [ 2, 5 ], [ 3, 6 ] ]</span></code>4:{"k":11,"param":"T"}
5:Taa9,<p>The <code><a href="/docs/v4.0.0-rc.2/List#hashCode()">hashCode</a></code> of an Collection is used to determine potential equality,
and is used when adding this to a <code><a href="/docs/v4.0.0-rc.2/Set">Set</a></code> or as a key in a <code><a href="/docs/v4.0.0-rc.2/Map">Map</a></code>, enabling
lookup via a different instance.</p>
<code class="codeBlock"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assert</span><span class="token punctuation">(</span>a <span class="token operator">!==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// different instances</span>
<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span> a <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assert</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token primitive">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><p>If two values have the same <code><a href="/docs/v4.0.0-rc.2/List#hashCode()">hashCode</a></code>, they are <a href="http://en.wikipedia.org/wiki/Collision_(computer_science)">not guaranteed
to be equal</a>. If two values have different <code><a href="/docs/v4.0.0-rc.2/List#hashCode()">hashCode</a></code>s,
they must not be equal.</p>
6:Ta47,<p>For example, to sum a Seq after mapping and filtering:</p>
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Seq</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>

<p><span class="token block-keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">collection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> collection<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> sum <span class="token operator">+</span> x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></p>
<p><span class="token function">Seq</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>
<span class="token comment">// 6</span></code></p>
7:T842,<p>This is similar to <code><a href="/docs/v4.0.0-rc.2/List">List(collection)</a></code>, but provided to allow for chained
expressions. However, when called on <code><a href="/docs/v4.0.0-rc.2/Map">Map</a></code> or other keyed collections,
<code>collection<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> discards the keys and creates a list of only the
values, whereas <code><a href="/docs/v4.0.0-rc.2/List">List(collection)</a></code> creates a list of entry tuples.</p>
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span><span class="token punctuation">,</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> myMap <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'Banana'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span> <span class="token comment">// List [ [ "a", "Apple" ], [ "b", "Banana" ] ]</span>
myMap<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// List [ "Apple", "Banana" ]</span></code>8:T8b6,<p>This is useful if you want to operate on an
Collection.Indexed and preserve the [index, value] pairs.</p>
<p>The returned Seq will have identical iteration order as
this Collection.</p>
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Seq</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> indexedSeq <span class="token operator">=</span> <span class="token function">Seq</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// Seq [ "A", "B", "C" ]</span>
indexedSeq<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">===</span> <span class="token string">'B'</span><span class="token punctuation">)</span>
<span class="token comment">// Seq [ "B" ]</span>
<span class="token keyword">const</span> keyedSeq <span class="token operator">=</span> indexedSeq<span class="token punctuation">.</span><span class="token function">toKeyedSeq</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// Seq { 0: "A", 1: "B", 2: "C" }</span>
keyedSeq<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">===</span> <span class="token string">'B'</span><span class="token punctuation">)</span>
<span class="token comment">// Seq { 1: "B" }</span></code>9:T749,<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filterNot</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">// Map { "a": 1, "c": 3 }</span></code><p>Note: <code><a href="/docs/v4.0.0-rc.2/List#filterNot()">filterNot()</a></code> always returns a new instance, even if it results in
not filtering out any values.</p></p>
a:T1056,<p>If a <code><span class="t param">comparator</span></code> is not provided, a default comparator uses <code><span class="token operator">&lt;</span></code> and <code><span class="token operator">></span></code>.</p>
<p><code><span class="token function">comparator</span><span class="token punctuation">(</span>valueA<span class="token punctuation">,</span> valueB<span class="token punctuation">)</span></code>:</p>
<ul>
<li>Returns <code><span class="token number">0</span></code> if the elements should not be swapped.</li>
<li>Returns <code><span class="token operator">-</span><span class="token number">1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>
<li>Returns <code><span class="token number">1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>
<li>Is pure, i.e. it must always return the same value for the same pair
of values.</li>
</ul>
<p>When sorting collections which have no defined order, their ordered
equivalents will be returned. e.g. <code>map<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> returns OrderedMap.</p>
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">"c"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-property property">"a"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">"b"</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token block-keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token block-keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token block-keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// OrderedMap { "a": 1, "b": 2, "c": 3 }</span></code><p>Note: <code><a href="/docs/v4.0.0-rc.2/List#sort()">sort()</a></code> Always returns a new instance, even if the original was
already sorted.</p>
b:Tda8,<p>Note: This is always an eager operation.</p>
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span><span class="token punctuation">,</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> listOfMaps <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> groupsOfMaps <span class="token operator">=</span> listOfMaps<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'v'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Map {</span>
<span class="token comment">//   0: List [ Map{ "v": 0 }, Map { "v": 0 } ],</span>
<span class="token comment">//   1: List [ Map{ "v": 1 }, Map { "v": 1 } ],</span>
<span class="token comment">//   2: List [ Map{ "v": 2 } ],</span>
<span class="token comment">// }</span></code>c:T404,<p>If begin is negative, it is offset from the end of the Collection. e.g.
<code><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span></code> returns a Collection of the last two entries. If it is not
provided the new Collection will begin at the beginning of this Collection.</p>
<p>If end is negative, it is offset from the end of the Collection. e.g.
<code><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></code> returns an Collection of everything but the last entry. If
it is not provided, the new Collection will continue through the end of
this Collection.</p>
<p>If the requested slice is equivalent to the current Collection, then it
will return itself.</p>
d:T65a,<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'god'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">skipWhile</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">g</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// List [ "cat", "hat", "god"" ]</span></code></p>
e:T655,<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'god'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">skipUntil</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hat</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// List [ "hat", "god"" ]</span></code></p>
f:T653,<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'god'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">takeWhile</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">o</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// List [ "dog", "frog" ]</span></code></p>
10:T654,<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'god'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">takeUntil</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">at</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// List [ "dog", "frog" ]</span></code></p>
12:["version","v4.0.0-rc.2","d"]
13:["type","OrderedSet","d"]
0:["XT7YSMMLdh0TOF8yI1quU",[[["",{"children":["docs",{"children":[["version","v4.0.0-rc.2","d"],{"children":[["type","OrderedSet","d"],{"children":["__PAGE__?{\"version\":\"v4.0.0-rc.2\",\"type\":\"OrderedSet\"}",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":[["version","v4.0.0-rc.2","d"],{"children":[["type","OrderedSet","d"],{"children":["__PAGE__",{},["$L1",["$","$L2",null,{"def":{"qualifiedName":"OrderedSet","doc":{"synopsis":"<p>A type of Set that has the additional guarantee that the iteration order of\nvalues will be the order in which they were <code><a href=\"/docs/v4.0.0-rc.2/OrderedSet#add()\">add</a></code>ed.</p>\n","description":"<p>The iteration behavior of OrderedSet is the same as native ES6 Set.</p>\n<p>Note that <code><a href=\"/docs/v4.0.0-rc.2/OrderedSet\">OrderedSet</a></code> are more expensive than non-ordered <code><a href=\"/docs/v4.0.0-rc.2/Set\">Set</a></code> and may\nconsume more memory. <code><a href=\"/docs/v4.0.0-rc.2/OrderedSet#add()\">OrderedSet#add</a></code> is amortized O(log32 N), but not\nstable.</p>\n","notes":[]},"functions":{"isOrderedSet":{"name":"OrderedSet.isOrderedSet","label":"OrderedSet.isOrderedSet()","id":"isOrderedSet()","isStatic":true,"signatures":[{"line":1720,"params":[{"name":"maybeOrderedSet","type":{"k":1}}],"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#isOrderedSet()"},"of":{"name":"OrderedSet.of","label":"OrderedSet.of()","id":"of()","isStatic":true,"signatures":[{"line":1725,"typeParams":["T"],"params":[{"name":"values","type":{"k":12,"name":"Array","args":[{"k":11,"param":"T"}]},"varArgs":true}],"type":{"k":12,"name":"OrderedSet","args":[{"k":11,"param":"T"}],"url":"/docs/v4.0.0-rc.2/OrderedSet"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#of()"},"fromKeys":{"name":"OrderedSet.fromKeys","label":"OrderedSet.fromKeys()","id":"fromKeys()","isStatic":true,"signatures":[{"line":1731,"typeParams":["T"],"params":[{"name":"iter","type":{"k":12,"name":"Collection","args":[{"k":11,"param":"T"},{"k":1}],"url":"/docs/v4.0.0-rc.2/Collection"}}],"type":{"k":12,"name":"OrderedSet","args":[{"k":11,"param":"T"}],"url":"/docs/v4.0.0-rc.2/OrderedSet"}},{"line":1732,"params":[{"name":"obj","type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":1}}]}}],"type":{"k":12,"name":"OrderedSet","args":[{"k":7}],"url":"/docs/v4.0.0-rc.2/OrderedSet"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#fromKeys()"}},"call":{"name":"OrderedSet","label":"OrderedSet()","id":"OrderedSet()","signatures":[{"line":1739,"type":{"k":12,"name":"OrderedSet","args":[{"k":1}],"url":"/docs/v4.0.0-rc.2/OrderedSet"}},{"line":1740,"typeParams":["T"],"type":{"k":12,"name":"OrderedSet","args":[{"k":11,"param":"T"}],"url":"/docs/v4.0.0-rc.2/OrderedSet"}},{"line":1741,"typeParams":["T"],"params":[{"name":"collection","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"T"}]}}],"type":{"k":12,"name":"OrderedSet","args":[{"k":11,"param":"T"}],"url":"/docs/v4.0.0-rc.2/OrderedSet"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#OrderedSet()"},"interface":{"members":{"concat":{"name":"concat","label":"concat()","id":"concat()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new OrderedSet with other collections concatenated to this one.</p>\n","description":"","notes":[]},"signatures":[{"line":1750,"typeParams":["C"],"params":[{"name":"valuesOrCollections","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":12,"name":"Iterable","args":[{"k":11,"param":"C"}]},{"k":11,"param":"C"}]}]},"varArgs":true}],"type":{"k":12,"name":"OrderedSet","args":[{"k":13,"types":[{"k":11,"param":"T"},{"k":11,"param":"C"}]}],"url":"/docs/v4.0.0-rc.2/OrderedSet"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#concat()","overrides":{"interface":"Set","label":"concat()","url":"/docs/v4.0.0-rc.2/Set#concat()"}},"map":{"name":"map","label":"map()","id":"map()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Set with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token function\">OrderedSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// OrderedSet [10, 20]</span></code><p>Note: <code><a href=\"/docs/v4.0.0-rc.2/OrderedSet#map()\">map()</a></code> always returns a new instance, even if it produced the same\nvalue at every step.</p>\n","notes":[]},"signatures":[{"line":1762,"typeParams":["M"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"M"}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"OrderedSet","args":[{"k":11,"param":"M"}],"url":"/docs/v4.0.0-rc.2/OrderedSet"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#map()","overrides":{"interface":"Set","label":"map()","url":"/docs/v4.0.0-rc.2/Set#map()"}},"flatMap":{"name":"flatMap","label":"flatMap()","id":"flatMap()","group":"Sequence algorithms","doc":{"synopsis":"<p>Flat-maps the OrderedSet, returning a new OrderedSet.</p>\n","description":"<p>Similar to <code>set<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token primitive\">true</span><span class=\"token punctuation\">)</span></code>.</p>\n","notes":[]},"signatures":[{"line":1772,"typeParams":["M"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"M"}]}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"OrderedSet","args":[{"k":11,"param":"M"}],"url":"/docs/v4.0.0-rc.2/OrderedSet"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#flatMap()","overrides":{"interface":"Set","label":"flatMap()","url":"/docs/v4.0.0-rc.2/Set#flatMap()"}},"filter":{"name":"filter","label":"filter()","id":"filter()","group":"Sequence algorithms","signatures":[{"line":1784,"typeParams":["F"],"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"OrderedSet","args":[{"k":11,"param":"F"}],"url":"/docs/v4.0.0-rc.2/OrderedSet"}},{"line":1788,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":11,"param":"T"}},{"name":"iter","type":{"k":3}}],"type":{"k":1}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#filter()","overrides":{"interface":"Set","label":"filter()","url":"/docs/v4.0.0-rc.2/Set#filter()"}},"zip":{"name":"zip","label":"zip()","id":"zip()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns an OrderedSet of the same type &quot;zipped&quot; with the provided\ncollections.</p>\n","description":"$3","notes":[{"name":"see","body":"<p>IndexedIterator.zip</p>\n"}]},"signatures":[{"line":1808,"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Collection","args":[{"k":1},{"k":1}]}]},"varArgs":true}],"type":{"k":12,"name":"OrderedSet","args":[{"k":1}],"url":"/docs/v4.0.0-rc.2/OrderedSet"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#zip()"},"zipWith":{"name":"zipWith","label":"zipWith()","id":"zipWith()","group":"Sequence algorithms","signatures":[{"line":1816,"typeParams":["U","Z"],"params":[{"name":"zipper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"otherValue","type":{"k":11,"param":"U"}}],"type":{"k":11,"param":"Z"}}},{"name":"otherCollection","type":{"k":12,"name":"Collection","args":[{"k":1},{"k":11,"param":"U"}],"url":"/docs/v4.0.0-rc.2/Collection"}}],"type":{"k":12,"name":"OrderedSet","args":[{"k":11,"param":"Z"}],"url":"/docs/v4.0.0-rc.2/OrderedSet"}},{"line":1820,"typeParams":["U","V","Z"],"params":[{"name":"zipper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"otherValue","type":{"k":11,"param":"U"}},{"name":"thirdValue","type":{"k":11,"param":"V"}}],"type":{"k":11,"param":"Z"}}},{"name":"otherCollection","type":{"k":12,"name":"Collection","args":[{"k":1},{"k":11,"param":"U"}],"url":"/docs/v4.0.0-rc.2/Collection"}},{"name":"thirdCollection","type":{"k":12,"name":"Collection","args":[{"k":1},{"k":11,"param":"V"}],"url":"/docs/v4.0.0-rc.2/Collection"}}],"type":{"k":12,"name":"OrderedSet","args":[{"k":11,"param":"Z"}],"url":"/docs/v4.0.0-rc.2/OrderedSet"}},{"line":1825,"typeParams":["Z"],"params":[{"name":"zipper","type":{"k":10,"params":[{"name":"any","type":{"k":12,"name":"Array","args":[{"k":1}]},"varArgs":true}],"type":{"k":11,"param":"Z"}}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Collection","args":[{"k":1},{"k":1}]}]},"varArgs":true}],"type":{"k":12,"name":"OrderedSet","args":[{"k":11,"param":"Z"}],"url":"/docs/v4.0.0-rc.2/OrderedSet"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#zipWith()"},"add":{"name":"add","label":"add()","id":"add()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new Set which also includes this value.</p>\n","description":"<p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Set#add()\">add</a></code> can be used in <code><a href=\"/docs/v4.0.0-rc.2/Set#withMutations()\">withMutations</a></code>.</p>\n","notes":[]},"signatures":[{"line":1582,"params":[{"name":"value","type":{"k":11,"param":"T"}}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#add()","inherited":{"interface":"Set","label":"add()","url":"/docs/v4.0.0-rc.2/Set#add()"}},"delete":{"name":"delete","label":"delete()","id":"delete()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new Set which excludes this value.</p>\n","description":"<p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Set#delete()\">delete</a></code> can be used in <code><a href=\"/docs/v4.0.0-rc.2/Set#withMutations()\">withMutations</a></code>.</p>\n<p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Set#delete()\">delete</a></code> <strong>cannot</strong> be safely used in IE8, use <code>remove</code> if\nsupporting old browsers.</p>\n","notes":[{"name":"alias","body":"remove"}]},"signatures":[{"line":1594,"params":[{"name":"value","type":"$4"}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#delete()","inherited":{"interface":"Set","label":"delete()","url":"/docs/v4.0.0-rc.2/Set#delete()"}},"clear":{"name":"clear","label":"clear()","id":"clear()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new Set containing no values.</p>\n","description":"<p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Set#clear()\">clear</a></code> can be used in <code><a href=\"/docs/v4.0.0-rc.2/Set#withMutations()\">withMutations</a></code>.</p>\n","notes":[]},"signatures":[{"line":1602,"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#clear()","inherited":{"interface":"Set","label":"clear()","url":"/docs/v4.0.0-rc.2/Set#clear()"}},"union":{"name":"union","label":"union()","id":"union()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a Set including any value from <code><span class=\"t param\">collections</span></code> that does not already\nexist in this Set.</p>\n","description":"<p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Set#union()\">union</a></code> can be used in <code><a href=\"/docs/v4.0.0-rc.2/Set#withMutations()\">withMutations</a></code>.</p>\n","notes":[{"name":"alias","body":"merge"}]},"signatures":[{"line":1611,"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":12,"name":"Collection","args":[{"k":1},"$4"]},{"k":12,"name":"Array","args":["$4"]}]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#union()","inherited":{"interface":"Set","label":"union()","url":"/docs/v4.0.0-rc.2/Set#union()"}},"intersect":{"name":"intersect","label":"intersect()","id":"intersect()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a Set which has removed any values not also contained\nwithin <code><span class=\"t param\">collections</span></code>.</p>\n","description":"<p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Set#intersect()\">intersect</a></code> can be used in <code><a href=\"/docs/v4.0.0-rc.2/Set#withMutations()\">withMutations</a></code>.</p>\n","notes":[]},"signatures":[{"line":1620,"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":12,"name":"Collection","args":[{"k":1},"$4"]},{"k":12,"name":"Array","args":["$4"]}]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#intersect()","inherited":{"interface":"Set","label":"intersect()","url":"/docs/v4.0.0-rc.2/Set#intersect()"}},"subtract":{"name":"subtract","label":"subtract()","id":"subtract()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a Set excluding any values contained within <code><span class=\"t param\">collections</span></code>.</p>\n","description":"<p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Set#subtract()\">subtract</a></code> can be used in <code><a href=\"/docs/v4.0.0-rc.2/Set#withMutations()\">withMutations</a></code>.</p>\n","notes":[]},"signatures":[{"line":1627,"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":12,"name":"Collection","args":[{"k":1},"$4"]},{"k":12,"name":"Array","args":["$4"]}]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#subtract()","inherited":{"interface":"Set","label":"subtract()","url":"/docs/v4.0.0-rc.2/Set#subtract()"}},"withMutations":{"name":"withMutations","label":"withMutations()","id":"withMutations()","group":"Transient changes","doc":{"synopsis":"<p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/v4.0.0-rc.2/Set#withMutations()\">withMutations</a></code>! Check the documentation for each method to see if it\nmentions being safe to use in <code><a href=\"/docs/v4.0.0-rc.2/Set#withMutations()\">withMutations</a></code>.</p>\n","description":"","notes":[{"name":"see","body":"<p><code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">Map#withMutations</a></code></p>\n"}]},"signatures":[{"line":1639,"params":[{"name":"mutator","type":{"k":10,"params":[{"name":"mutable","type":{"k":3}}],"type":{"k":1}}}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#withMutations()","inherited":{"interface":"Set","label":"withMutations()","url":"/docs/v4.0.0-rc.2/Set#withMutations()"}},"asMutable":{"name":"asMutable","label":"asMutable()","id":"asMutable()","group":"Transient changes","doc":{"synopsis":"<p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/v4.0.0-rc.2/Set#withMutations()\">withMutations</a></code>! Check the documentation for each method to see if it\nmentions being safe to use in <code><a href=\"/docs/v4.0.0-rc.2/Set#withMutations()\">withMutations</a></code>.</p>\n","description":"","notes":[{"name":"see","body":"<p><code><a href=\"/docs/v4.0.0-rc.2/Map#asMutable()\">Map#asMutable</a></code></p>\n"}]},"signatures":[{"line":1648,"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#asMutable()","inherited":{"interface":"Set","label":"asMutable()","url":"/docs/v4.0.0-rc.2/Set#asMutable()"}},"asImmutable":{"name":"asImmutable","label":"asImmutable()","id":"asImmutable()","group":"Transient changes","doc":{"synopsis":"","description":"","notes":[{"name":"see","body":"<p><code><a href=\"/docs/v4.0.0-rc.2/Map#asImmutable()\">Map#asImmutable</a></code></p>\n"}]},"signatures":[{"line":1653,"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#asImmutable()","inherited":{"interface":"Set","label":"asImmutable()","url":"/docs/v4.0.0-rc.2/Set#asImmutable()"}},"toJS":{"name":"toJS","label":"toJS()","id":"toJS()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Deeply converts this Set collection to equivalent native JavaScript Array.</p>\n","description":"","notes":[]},"signatures":[{"line":3156,"type":{"k":12,"name":"Array","args":[{"k":1}]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#toJS()","inherited":{"interface":"Collection.Set","label":"toJS()","url":"/docs/v4.0.0-rc.2/Collection.Set#toJS()"}},"toJSON":{"name":"toJSON","label":"toJSON()","id":"toJSON()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this Set collection to equivalent native JavaScript Array.</p>\n","description":"","notes":[]},"signatures":[{"line":3161,"type":{"k":12,"name":"Array","args":["$4"]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#toJSON()","inherited":{"interface":"Collection.Set","label":"toJSON()","url":"/docs/v4.0.0-rc.2/Collection.Set#toJSON()"}},"toSeq":{"name":"toSeq","label":"toSeq()","id":"toSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns Seq.Set.</p>\n","description":"","notes":[]},"signatures":[{"line":3167,"type":{"k":12,"name":"Seq.Set","args":["$4"],"url":"/docs/v4.0.0-rc.2/Seq.Set"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#toSeq()","inherited":{"interface":"Collection.Set","label":"toSeq()","url":"/docs/v4.0.0-rc.2/Collection.Set#toSeq()"}},"[Symbol.iterator]":{"name":"[Symbol.iterator]","label":"[Symbol.iterator]()","id":"[Symbol.iterator]()","group":"Sequence algorithms","signatures":[{"line":3219,"type":{"k":12,"name":"IterableIterator","args":["$4"]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#[Symbol.iterator]()","inherited":{"interface":"Collection.Set","label":"[Symbol.iterator]()","url":"/docs/v4.0.0-rc.2/Collection.Set#[Symbol.iterator]()"}},"equals":{"name":"equals","label":"equals()","id":"equals()","group":"Value equality","doc":{"synopsis":"<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/v4.0.0-rc.2/is()\">Immutable.is()</a></code>.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token qualifier\">Immutable</span><span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span></code>, but provided to\nallow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":3254,"params":[{"name":"other","type":{"k":1}}],"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#equals()","inherited":{"interface":"Collection","label":"equals()","url":"/docs/v4.0.0-rc.2/Collection#equals()"}},"hashCode":{"name":"hashCode","label":"hashCode()","id":"hashCode()","group":"Value equality","doc":{"synopsis":"<p>Computes and returns the hashed identity for this Collection.</p>\n","description":"$5","notes":[]},"signatures":[{"line":3277,"type":{"k":6}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#hashCode()","inherited":{"interface":"Collection","label":"hashCode()","url":"/docs/v4.0.0-rc.2/Collection#hashCode()"}},"get":{"name":"get","label":"get()","id":"get()","group":"Reading values","signatures":[{"line":3290,"typeParams":["NSV"],"params":[{"name":"key","type":"$4"},{"name":"notSetValue","type":{"k":11,"param":"NSV"}}],"type":{"k":13,"types":["$4",{"k":11,"param":"NSV"}]}},{"line":3291,"params":[{"name":"key","type":"$4"}],"type":{"k":13,"types":["$4",{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#get()","inherited":{"interface":"Collection","label":"get()","url":"/docs/v4.0.0-rc.2/Collection#get()"}},"has":{"name":"has","label":"has()","id":"has()","group":"Reading values","doc":{"synopsis":"<p>True if a key exists within this <code><a href=\"/docs/v4.0.0-rc.2/Collection\">Collection</a></code>, using <code><a href=\"/docs/v4.0.0-rc.2/is()\">Immutable.is</a></code>\nto determine equality</p>\n","description":"","notes":[]},"signatures":[{"line":3297,"params":[{"name":"key","type":"$4"}],"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#has()","inherited":{"interface":"Collection","label":"has()","url":"/docs/v4.0.0-rc.2/Collection#has()"}},"includes":{"name":"includes","label":"includes()","id":"includes()","group":"Reading values","doc":{"synopsis":"<p>True if a value exists within this <code><a href=\"/docs/v4.0.0-rc.2/Collection\">Collection</a></code>, using <code><a href=\"/docs/v4.0.0-rc.2/is()\">Immutable.is</a></code>\nto determine equality</p>\n","description":"","notes":[{"name":"alias","body":"contains"}]},"signatures":[{"line":3304,"params":[{"name":"value","type":"$4"}],"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#includes()","inherited":{"interface":"Collection","label":"includes()","url":"/docs/v4.0.0-rc.2/Collection#includes()"}},"first":{"name":"first","label":"first()","id":"first()","group":"Reading values","doc":{"synopsis":"<p>The first value in the Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":3310,"type":{"k":13,"types":["$4",{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#first()","inherited":{"interface":"Collection","label":"first()","url":"/docs/v4.0.0-rc.2/Collection#first()"}},"last":{"name":"last","label":"last()","id":"last()","group":"Reading values","doc":{"synopsis":"<p>The last value in the Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":3315,"type":{"k":13,"types":["$4",{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#last()","inherited":{"interface":"Collection","label":"last()","url":"/docs/v4.0.0-rc.2/Collection#last()"}},"getIn":{"name":"getIn","label":"getIn()","id":"getIn()","group":"Reading deep values","doc":{"synopsis":"<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n","description":"","notes":[]},"signatures":[{"line":3324,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Iterable","args":[{"k":1}]}},{"name":"notSetValue","type":{"k":1},"optional":true}],"type":{"k":1}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#getIn()","inherited":{"interface":"Collection","label":"getIn()","url":"/docs/v4.0.0-rc.2/Collection#getIn()"}},"hasIn":{"name":"hasIn","label":"hasIn()","id":"hasIn()","group":"Reading deep values","doc":{"synopsis":"<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n","description":"","notes":[]},"signatures":[{"line":3330,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Iterable","args":[{"k":1}]}}],"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#hasIn()","inherited":{"interface":"Collection","label":"hasIn()","url":"/docs/v4.0.0-rc.2/Collection#hasIn()"}},"update":{"name":"update","label":"update()","id":"update()","group":"Persistent changes","doc":{"synopsis":"<p>This can be very useful as a way to &quot;chain&quot; a normal function into a\nsequence of methods. RxJS calls this &quot;let&quot; and lodash calls it &quot;thru&quot;.</p>\n","description":"$6","notes":[]},"signatures":[{"line":3354,"typeParams":["R"],"params":[{"name":"updater","type":{"k":10,"params":[{"name":"value","type":{"k":3}}],"type":{"k":11,"param":"R"}}}],"type":{"k":11,"param":"R"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#update()","inherited":{"interface":"Collection","label":"update()","url":"/docs/v4.0.0-rc.2/Collection#update()"}},"toArray":{"name":"toArray","label":"toArray()","id":"toArray()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this collection to an Array, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":3378,"type":{"k":12,"name":"Array","args":["$4"]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#toArray()","inherited":{"interface":"Collection","label":"toArray()","url":"/docs/v4.0.0-rc.2/Collection#toArray()"}},"toObject":{"name":"toObject","label":"toObject()","id":"toObject()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this Collection to an Object.</p>\n","description":"<p>Converts keys to Strings.</p>\n","notes":[]},"signatures":[{"line":3385,"type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":"$4"}]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#toObject()","inherited":{"interface":"Collection","label":"toObject()","url":"/docs/v4.0.0-rc.2/Collection#toObject()"}},"toMap":{"name":"toMap","label":"toMap()","id":"toMap()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toKeyedSeq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":3396,"type":{"k":12,"name":"Map","args":["$4","$4"],"url":"/docs/v4.0.0-rc.2/Map"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#toMap()","inherited":{"interface":"Collection","label":"toMap()","url":"/docs/v4.0.0-rc.2/Collection#toMap()"}},"toOrderedMap":{"name":"toOrderedMap","label":"toOrderedMap()","id":"toOrderedMap()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\">OrderedMap</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toKeyedSeq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":3404,"type":{"k":12,"name":"OrderedMap","args":["$4","$4"],"url":"/docs/v4.0.0-rc.2/OrderedMap"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#toOrderedMap()","inherited":{"interface":"Collection","label":"toOrderedMap()","url":"/docs/v4.0.0-rc.2/Collection#toOrderedMap()"}},"toSet":{"name":"toSet","label":"toSet()","id":"toSet()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><a href=\"/docs/v4.0.0-rc.2/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n","notes":[]},"signatures":[{"line":3413,"type":{"k":12,"name":"Set","args":["$4"],"url":"/docs/v4.0.0-rc.2/Set"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#toSet()","inherited":{"interface":"Collection","label":"toSet()","url":"/docs/v4.0.0-rc.2/Collection#toSet()"}},"toOrderedSet":{"name":"toOrderedSet","label":"toOrderedSet()","id":"toOrderedSet()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\">OrderedSet</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueSeq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":3422,"type":{"k":12,"name":"OrderedSet","args":["$4"],"url":"/docs/v4.0.0-rc.2/OrderedSet"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#toOrderedSet()","inherited":{"interface":"Collection","label":"toOrderedSet()","url":"/docs/v4.0.0-rc.2/Collection#toOrderedSet()"}},"toList":{"name":"toList","label":"toList()","id":"toList()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a List, discarding keys.</p>\n","description":"$7","notes":[]},"signatures":[{"line":3439,"type":{"k":12,"name":"List","args":["$4"],"url":"/docs/v4.0.0-rc.2/List"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#toList()","inherited":{"interface":"Collection","label":"toList()","url":"/docs/v4.0.0-rc.2/Collection#toList()"}},"toStack":{"name":"toStack","label":"toStack()","id":"toStack()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><a href=\"/docs/v4.0.0-rc.2/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n","notes":[]},"signatures":[{"line":3448,"type":{"k":12,"name":"Stack","args":["$4"],"url":"/docs/v4.0.0-rc.2/Stack"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#toStack()","inherited":{"interface":"Collection","label":"toStack()","url":"/docs/v4.0.0-rc.2/Collection#toStack()"}},"toKeyedSeq":{"name":"toKeyedSeq","label":"toKeyedSeq()","id":"toKeyedSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n","description":"$8","notes":[]},"signatures":[{"line":3479,"type":{"k":12,"name":"Seq.Keyed","args":["$4","$4"],"url":"/docs/v4.0.0-rc.2/Seq.Keyed"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#toKeyedSeq()","inherited":{"interface":"Collection","label":"toKeyedSeq()","url":"/docs/v4.0.0-rc.2/Collection#toKeyedSeq()"}},"toIndexedSeq":{"name":"toIndexedSeq","label":"toIndexedSeq()","id":"toIndexedSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":3484,"type":{"k":12,"name":"Seq.Indexed","args":["$4"],"url":"/docs/v4.0.0-rc.2/Seq.Indexed"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#toIndexedSeq()","inherited":{"interface":"Collection","label":"toIndexedSeq()","url":"/docs/v4.0.0-rc.2/Collection#toIndexedSeq()"}},"toSetSeq":{"name":"toSetSeq","label":"toSetSeq()","id":"toSetSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":3489,"type":{"k":12,"name":"Seq.Set","args":["$4"],"url":"/docs/v4.0.0-rc.2/Seq.Set"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#toSetSeq()","inherited":{"interface":"Collection","label":"toSetSeq()","url":"/docs/v4.0.0-rc.2/Collection#toSetSeq()"}},"keys":{"name":"keys","label":"keys()","id":"keys()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"/docs/v4.0.0-rc.2/Collection\">Collection</a></code>&#39;s keys.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/v4.0.0-rc.2/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n","notes":[]},"signatures":[{"line":3501,"type":{"k":12,"name":"IterableIterator","args":["$4"]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#keys()","inherited":{"interface":"Collection","label":"keys()","url":"/docs/v4.0.0-rc.2/Collection#keys()"}},"values":{"name":"values","label":"values()","id":"values()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"/docs/v4.0.0-rc.2/Collection\">Collection</a></code>&#39;s values.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/v4.0.0-rc.2/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n","notes":[]},"signatures":[{"line":3510,"type":{"k":12,"name":"IterableIterator","args":["$4"]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#values()","inherited":{"interface":"Collection","label":"values()","url":"/docs/v4.0.0-rc.2/Collection#values()"}},"entries":{"name":"entries","label":"entries()","id":"entries()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"/docs/v4.0.0-rc.2/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\">[</span> key<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">]</span></code> tuples.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/v4.0.0-rc.2/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n","notes":[]},"signatures":[{"line":3519,"type":{"k":12,"name":"IterableIterator","args":[{"k":15,"types":["$4","$4"]}]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#entries()","inherited":{"interface":"Collection","label":"entries()","url":"/docs/v4.0.0-rc.2/Collection#entries()"}},"keySeq":{"name":"keySeq","label":"keySeq()","id":"keySeq()","group":"Collections (Seq)","doc":{"synopsis":"<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n","description":"","notes":[]},"signatures":[{"line":3528,"type":{"k":12,"name":"Seq.Indexed","args":["$4"],"url":"/docs/v4.0.0-rc.2/Seq.Indexed"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#keySeq()","inherited":{"interface":"Collection","label":"keySeq()","url":"/docs/v4.0.0-rc.2/Collection#keySeq()"}},"valueSeq":{"name":"valueSeq","label":"valueSeq()","id":"valueSeq()","group":"Collections (Seq)","doc":{"synopsis":"<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":3533,"type":{"k":12,"name":"Seq.Indexed","args":["$4"],"url":"/docs/v4.0.0-rc.2/Seq.Indexed"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#valueSeq()","inherited":{"interface":"Collection","label":"valueSeq()","url":"/docs/v4.0.0-rc.2/Collection#valueSeq()"}},"entrySeq":{"name":"entrySeq","label":"entrySeq()","id":"entrySeq()","group":"Collections (Seq)","doc":{"synopsis":"<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n","description":"","notes":[]},"signatures":[{"line":3538,"type":{"k":12,"name":"Seq.Indexed","args":[{"k":15,"types":["$4","$4"]}],"url":"/docs/v4.0.0-rc.2/Seq.Indexed"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#entrySeq()","inherited":{"interface":"Collection","label":"entrySeq()","url":"/docs/v4.0.0-rc.2/Collection#entrySeq()"}},"filterNot":{"name":"filterNot","label":"filterNot()","id":"filterNot()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n","description":"$9","notes":[]},"signatures":[{"line":3596,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#filterNot()","inherited":{"interface":"Collection","label":"filterNot()","url":"/docs/v4.0.0-rc.2/Collection#filterNot()"}},"reverse":{"name":"reverse","label":"reverse()","id":"reverse()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Collection of the same type in reverse order.</p>\n","description":"","notes":[]},"signatures":[{"line":3604,"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#reverse()","inherited":{"interface":"Collection","label":"reverse()","url":"/docs/v4.0.0-rc.2/Collection#reverse()"}},"sort":{"name":"sort","label":"sort()","id":"sort()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n","description":"$a","notes":[]},"signatures":[{"line":3636,"params":[{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":"$4"},{"name":"valueB","type":"$4"}],"type":{"k":6}},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#sort()","inherited":{"interface":"Collection","label":"sort()","url":"/docs/v4.0.0-rc.2/Collection#sort()"}},"sortBy":{"name":"sortBy","label":"sortBy()","id":"sortBy()","group":"Sequence algorithms","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v4.0.0-rc.2/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n","description":"<p><code class=\"codeBlock\">hitters<span class=\"token punctuation\">.</span><span class=\"token function\">sortBy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hitter</span> <span class=\"token operator\">=></span> hitter<span class=\"token punctuation\">.</span>avgHits<span class=\"token punctuation\">)</span></code><p>Note: <code><a href=\"/docs/v4.0.0-rc.2/List#sortBy()\">sortBy()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p></p>\n","notes":[]},"signatures":[{"line":3647,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"C"}},{"name":"valueB","type":{"k":11,"param":"C"}}],"type":{"k":6}},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#sortBy()","inherited":{"interface":"Collection","label":"sortBy()","url":"/docs/v4.0.0-rc.2/Collection#sortBy()"}},"groupBy":{"name":"groupBy","label":"groupBy()","id":"groupBy()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a <code><a href=\"/docs/v4.0.0-rc.2/Collection.Keyed\">Collection.Keyed</a></code> of <code><span class=\"token qualifier\">Collection</span><span class=\"token punctuation\">.</span><span class=\"token qualifier\">Keyeds</span></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n","description":"$b","notes":[]},"signatures":[{"line":3674,"typeParams":["G"],"params":[{"name":"grouper","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"G"}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Seq.Keyed","args":[{"k":11,"param":"G"},{"k":12,"name":"Collection","args":["$4","$4"]}],"url":"/docs/v4.0.0-rc.2/Seq.Keyed"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#groupBy()","inherited":{"interface":"Collection","label":"groupBy()","url":"/docs/v4.0.0-rc.2/Collection#groupBy()"}},"forEach":{"name":"forEach","label":"forEach()","id":"forEach()","group":"Side effects","doc":{"synopsis":"<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n","description":"<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\">false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n","notes":[]},"signatures":[{"line":3689,"params":[{"name":"sideEffect","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":1}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":6}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#forEach()","inherited":{"interface":"Collection","label":"forEach()","url":"/docs/v4.0.0-rc.2/Collection#forEach()"}},"slice":{"name":"slice","label":"slice()","id":"slice()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n","description":"$c","notes":[]},"signatures":[{"line":3713,"params":[{"name":"begin","type":{"k":6},"optional":true},{"name":"end","type":{"k":6},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#slice()","inherited":{"interface":"Collection","label":"slice()","url":"/docs/v4.0.0-rc.2/Collection#slice()"}},"rest":{"name":"rest","label":"rest()","id":"rest()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n","description":"","notes":[]},"signatures":[{"line":3719,"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#rest()","inherited":{"interface":"Collection","label":"rest()","url":"/docs/v4.0.0-rc.2/Collection#rest()"}},"butLast":{"name":"butLast","label":"butLast()","id":"butLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n","description":"","notes":[]},"signatures":[{"line":3725,"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#butLast()","inherited":{"interface":"Collection","label":"butLast()","url":"/docs/v4.0.0-rc.2/Collection#butLast()"}},"skip":{"name":"skip","label":"skip()","id":"skip()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":3731,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#skip()","inherited":{"interface":"Collection","label":"skip()","url":"/docs/v4.0.0-rc.2/Collection#skip()"}},"skipLast":{"name":"skipLast","label":"skipLast()","id":"skipLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":3737,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#skipLast()","inherited":{"interface":"Collection","label":"skipLast()","url":"/docs/v4.0.0-rc.2/Collection#skipLast()"}},"skipWhile":{"name":"skipWhile","label":"skipWhile()","id":"skipWhile()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n","description":"$d","notes":[]},"signatures":[{"line":3750,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#skipWhile()","inherited":{"interface":"Collection","label":"skipWhile()","url":"/docs/v4.0.0-rc.2/Collection#skipWhile()"}},"skipUntil":{"name":"skipUntil","label":"skipUntil()","id":"skipUntil()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n","description":"$e","notes":[]},"signatures":[{"line":3766,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#skipUntil()","inherited":{"interface":"Collection","label":"skipUntil()","url":"/docs/v4.0.0-rc.2/Collection#skipUntil()"}},"take":{"name":"take","label":"take()","id":"take()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":3775,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#take()","inherited":{"interface":"Collection","label":"take()","url":"/docs/v4.0.0-rc.2/Collection#take()"}},"takeLast":{"name":"takeLast","label":"takeLast()","id":"takeLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":3781,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#takeLast()","inherited":{"interface":"Collection","label":"takeLast()","url":"/docs/v4.0.0-rc.2/Collection#takeLast()"}},"takeWhile":{"name":"takeWhile","label":"takeWhile()","id":"takeWhile()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"$f","notes":[]},"signatures":[{"line":3794,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#takeWhile()","inherited":{"interface":"Collection","label":"takeWhile()","url":"/docs/v4.0.0-rc.2/Collection#takeWhile()"}},"takeUntil":{"name":"takeUntil","label":"takeUntil()","id":"takeUntil()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n","description":"$10","notes":[]},"signatures":[{"line":3810,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#takeUntil()","inherited":{"interface":"Collection","label":"takeUntil()","url":"/docs/v4.0.0-rc.2/Collection#takeUntil()"}},"flatten":{"name":"flatten","label":"flatten()","id":"flatten()","group":"Combination","signatures":[{"line":3840,"params":[{"name":"depth","type":{"k":6},"optional":true}],"type":{"k":12,"name":"Collection","args":[{"k":1},{"k":1}],"url":"/docs/v4.0.0-rc.2/Collection"}},{"line":3841,"params":[{"name":"shallow","type":{"k":5},"optional":true}],"type":{"k":12,"name":"Collection","args":[{"k":1},{"k":1}],"url":"/docs/v4.0.0-rc.2/Collection"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#flatten()","inherited":{"interface":"Collection","label":"flatten()","url":"/docs/v4.0.0-rc.2/Collection#flatten()"}},"reduce":{"name":"reduce","label":"reduce()","id":"reduce()","group":"Reducing a value","signatures":[{"line":3864,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":11,"param":"R"}},{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}},{"name":"initialReduction","type":{"k":11,"param":"R"}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":11,"param":"R"}},{"line":3869,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":13,"types":["$4",{"k":11,"param":"R"}]}},{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}}],"type":{"k":11,"param":"R"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#reduce()","inherited":{"interface":"Collection","label":"reduce()","url":"/docs/v4.0.0-rc.2/Collection#reduce()"}},"reduceRight":{"name":"reduceRight","label":"reduceRight()","id":"reduceRight()","group":"Reducing a value","signatures":[{"line":3879,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":11,"param":"R"}},{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}},{"name":"initialReduction","type":{"k":11,"param":"R"}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":11,"param":"R"}},{"line":3884,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":13,"types":["$4",{"k":11,"param":"R"}]}},{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}}],"type":{"k":11,"param":"R"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#reduceRight()","inherited":{"interface":"Collection","label":"reduceRight()","url":"/docs/v4.0.0-rc.2/Collection#reduceRight()"}},"every":{"name":"every","label":"every()","id":"every()","group":"Reducing a value","doc":{"synopsis":"<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":3891,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#every()","inherited":{"interface":"Collection","label":"every()","url":"/docs/v4.0.0-rc.2/Collection#every()"}},"some":{"name":"some","label":"some()","id":"some()","group":"Reducing a value","doc":{"synopsis":"<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":3899,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#some()","inherited":{"interface":"Collection","label":"some()","url":"/docs/v4.0.0-rc.2/Collection#some()"}},"join":{"name":"join","label":"join()","id":"join()","group":"Reducing a value","doc":{"synopsis":"<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\">\",\"</span></code>.</p>\n","description":"","notes":[]},"signatures":[{"line":3908,"params":[{"name":"separator","type":{"k":7},"optional":true}],"type":{"k":7}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#join()","inherited":{"interface":"Collection","label":"join()","url":"/docs/v4.0.0-rc.2/Collection#join()"}},"isEmpty":{"name":"isEmpty","label":"isEmpty()","id":"isEmpty()","group":"Reducing a value","doc":{"synopsis":"<p>Returns true if this Collection includes no values.</p>\n","description":"<p>For some lazy <code><a href=\"/docs/v4.0.0-rc.2/Seq\">Seq</a></code>, <code><a href=\"/docs/v4.0.0-rc.2/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n","notes":[]},"signatures":[{"line":3916,"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#isEmpty()","inherited":{"interface":"Collection","label":"isEmpty()","url":"/docs/v4.0.0-rc.2/Collection#isEmpty()"}},"count":{"name":"count","label":"count()","id":"count()","group":"Reducing a value","signatures":[{"line":3928,"type":{"k":6}},{"line":3929,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":6}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#count()","inherited":{"interface":"Collection","label":"count()","url":"/docs/v4.0.0-rc.2/Collection#count()"}},"countBy":{"name":"countBy","label":"countBy()","id":"countBy()","group":"Reducing a value","doc":{"synopsis":"<p>Returns a <code><a href=\"/docs/v4.0.0-rc.2/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n","description":"<p>Note: This is not a lazy operation.</p>\n","notes":[]},"signatures":[{"line":3940,"typeParams":["G"],"params":[{"name":"grouper","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"G"}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Map","args":[{"k":11,"param":"G"},{"k":6}],"url":"/docs/v4.0.0-rc.2/Map"}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#countBy()","inherited":{"interface":"Collection","label":"countBy()","url":"/docs/v4.0.0-rc.2/Collection#countBy()"}},"find":{"name":"find","label":"find()","id":"find()","group":"Search for value","doc":{"synopsis":"<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":3951,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true},{"name":"notSetValue","type":"$4","optional":true}],"type":{"k":13,"types":["$4",{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#find()","inherited":{"interface":"Collection","label":"find()","url":"/docs/v4.0.0-rc.2/Collection#find()"}},"findLast":{"name":"findLast","label":"findLast()","id":"findLast()","group":"Search for value","doc":{"synopsis":"<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":3962,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true},{"name":"notSetValue","type":"$4","optional":true}],"type":{"k":13,"types":["$4",{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#findLast()","inherited":{"interface":"Collection","label":"findLast()","url":"/docs/v4.0.0-rc.2/Collection#findLast()"}},"findEntry":{"name":"findEntry","label":"findEntry()","id":"findEntry()","group":"Search for value","doc":{"synopsis":"<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":3971,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true},{"name":"notSetValue","type":"$4","optional":true}],"type":{"k":13,"types":[{"k":15,"types":["$4","$4"]},{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#findEntry()","inherited":{"interface":"Collection","label":"findEntry()","url":"/docs/v4.0.0-rc.2/Collection#findEntry()"}},"findLastEntry":{"name":"findLastEntry","label":"findLastEntry()","id":"findLastEntry()","group":"Search for value","doc":{"synopsis":"<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":3983,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true},{"name":"notSetValue","type":"$4","optional":true}],"type":{"k":13,"types":[{"k":15,"types":["$4","$4"]},{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#findLastEntry()","inherited":{"interface":"Collection","label":"findLastEntry()","url":"/docs/v4.0.0-rc.2/Collection#findLastEntry()"}},"findKey":{"name":"findKey","label":"findKey()","id":"findKey()","group":"Search for value","doc":{"synopsis":"<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":3992,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":13,"types":["$4",{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#findKey()","inherited":{"interface":"Collection","label":"findKey()","url":"/docs/v4.0.0-rc.2/Collection#findKey()"}},"findLastKey":{"name":"findLastKey","label":"findLastKey()","id":"findLastKey()","group":"Search for value","doc":{"synopsis":"<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":4002,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":13,"types":["$4",{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#findLastKey()","inherited":{"interface":"Collection","label":"findLastKey()","url":"/docs/v4.0.0-rc.2/Collection#findLastKey()"}},"keyOf":{"name":"keyOf","label":"keyOf()","id":"keyOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the key associated with the search value, or undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":4010,"params":[{"name":"searchValue","type":"$4"}],"type":{"k":13,"types":["$4",{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#keyOf()","inherited":{"interface":"Collection","label":"keyOf()","url":"/docs/v4.0.0-rc.2/Collection#keyOf()"}},"lastKeyOf":{"name":"lastKeyOf","label":"lastKeyOf()","id":"lastKeyOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the last key associated with the search value, or undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":4015,"params":[{"name":"searchValue","type":"$4"}],"type":{"k":13,"types":["$4",{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#lastKeyOf()","inherited":{"interface":"Collection","label":"lastKeyOf()","url":"/docs/v4.0.0-rc.2/Collection#lastKeyOf()"}},"max":{"name":"max","label":"max()","id":"max()","group":"Search for value","doc":{"synopsis":"<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/v4.0.0-rc.2/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\">></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/v4.0.0-rc.2/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\">></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n","notes":[]},"signatures":[{"line":4032,"params":[{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":"$4"},{"name":"valueB","type":"$4"}],"type":{"k":6}},"optional":true}],"type":{"k":13,"types":["$4",{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#max()","inherited":{"interface":"Collection","label":"max()","url":"/docs/v4.0.0-rc.2/Collection#max()"}},"maxBy":{"name":"maxBy","label":"maxBy()","id":"maxBy()","group":"Search for value","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v4.0.0-rc.2/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"<p><code class=\"codeBlock\">hitters<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hitter</span> <span class=\"token operator\">=></span> hitter<span class=\"token punctuation\">.</span>avgHits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></p>\n","notes":[]},"signatures":[{"line":4041,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"C"}},{"name":"valueB","type":{"k":11,"param":"C"}}],"type":{"k":6}},"optional":true}],"type":{"k":13,"types":["$4",{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#maxBy()","inherited":{"interface":"Collection","label":"maxBy()","url":"/docs/v4.0.0-rc.2/Collection#maxBy()"}},"min":{"name":"min","label":"min()","id":"min()","group":"Search for value","doc":{"synopsis":"<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/v4.0.0-rc.2/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\">&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/v4.0.0-rc.2/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\">&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n","notes":[]},"signatures":[{"line":4061,"params":[{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":"$4"},{"name":"valueB","type":"$4"}],"type":{"k":6}},"optional":true}],"type":{"k":13,"types":["$4",{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#min()","inherited":{"interface":"Collection","label":"min()","url":"/docs/v4.0.0-rc.2/Collection#min()"}},"minBy":{"name":"minBy","label":"minBy()","id":"minBy()","group":"Search for value","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v4.0.0-rc.2/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"<p><code class=\"codeBlock\">hitters<span class=\"token punctuation\">.</span><span class=\"token function\">minBy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hitter</span> <span class=\"token operator\">=></span> hitter<span class=\"token punctuation\">.</span>avgHits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></p>\n","notes":[]},"signatures":[{"line":4070,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":"$4"},{"name":"key","type":"$4"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"C"}},{"name":"valueB","type":{"k":11,"param":"C"}}],"type":{"k":6}},"optional":true}],"type":{"k":13,"types":["$4",{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#minBy()","inherited":{"interface":"Collection","label":"minBy()","url":"/docs/v4.0.0-rc.2/Collection#minBy()"}},"isSubset":{"name":"isSubset","label":"isSubset()","id":"isSubset()","group":"Comparison","doc":{"synopsis":"<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4081,"params":[{"name":"iter","type":{"k":12,"name":"Iterable","args":["$4"]}}],"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#isSubset()","inherited":{"interface":"Collection","label":"isSubset()","url":"/docs/v4.0.0-rc.2/Collection#isSubset()"}},"isSuperset":{"name":"isSuperset","label":"isSuperset()","id":"isSuperset()","group":"Comparison","doc":{"synopsis":"<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n","description":"","notes":[]},"signatures":[{"line":4086,"params":[{"name":"iter","type":{"k":12,"name":"Iterable","args":["$4"]}}],"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedSet#isSuperset()","inherited":{"interface":"Collection","label":"isSuperset()","url":"/docs/v4.0.0-rc.2/Collection#isSuperset()"}}},"line":1743,"typeParams":["T"],"extends":[{"k":12,"name":"Set","args":["$4"],"url":"/docs/v4.0.0-rc.2/Set"}]},"label":"OrderedSet","url":"/docs/v4.0.0-rc.2/OrderedSet"},"sidebarLinks":[{"label":"fromJS()","url":"/docs/v4.0.0-rc.2/fromJS()"},{"label":"is()","url":"/docs/v4.0.0-rc.2/is()"},{"label":"hash()","url":"/docs/v4.0.0-rc.2/hash()"},{"label":"isImmutable()","url":"/docs/v4.0.0-rc.2/isImmutable()"},{"label":"isCollection()","url":"/docs/v4.0.0-rc.2/isCollection()"},{"label":"isKeyed()","url":"/docs/v4.0.0-rc.2/isKeyed()"},{"label":"isIndexed()","url":"/docs/v4.0.0-rc.2/isIndexed()"},{"label":"isAssociative()","url":"/docs/v4.0.0-rc.2/isAssociative()"},{"label":"isOrdered()","url":"/docs/v4.0.0-rc.2/isOrdered()"},{"label":"isValueObject()","url":"/docs/v4.0.0-rc.2/isValueObject()"},{"label":"ValueObject","url":"/docs/v4.0.0-rc.2/ValueObject"},{"label":"List","url":"/docs/v4.0.0-rc.2/List"},{"label":"Map","url":"/docs/v4.0.0-rc.2/Map"},{"label":"OrderedMap","url":"/docs/v4.0.0-rc.2/OrderedMap"},{"label":"Set","url":"/docs/v4.0.0-rc.2/Set"},{"label":"OrderedSet","url":"/docs/v4.0.0-rc.2/OrderedSet"},{"label":"Stack","url":"/docs/v4.0.0-rc.2/Stack"},{"label":"Range()","url":"/docs/v4.0.0-rc.2/Range()"},{"label":"Repeat()","url":"/docs/v4.0.0-rc.2/Repeat()"},{"label":"Record","url":"/docs/v4.0.0-rc.2/Record"},{"label":"Record.Class","url":"/docs/v4.0.0-rc.2/Record.Class"},{"label":"Record.Instance","url":"/docs/v4.0.0-rc.2/Record.Instance"},{"label":"Seq","url":"/docs/v4.0.0-rc.2/Seq"},{"label":"Seq.Keyed","url":"/docs/v4.0.0-rc.2/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/v4.0.0-rc.2/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/v4.0.0-rc.2/Seq.Set"},{"label":"Collection","url":"/docs/v4.0.0-rc.2/Collection"},{"label":"Collection.Keyed","url":"/docs/v4.0.0-rc.2/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/v4.0.0-rc.2/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/v4.0.0-rc.2/Collection.Set"}]}],null]]},["$","$L11",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$12","children","$13","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L14",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","div",null,{"children":[["$","$L15",null,{"version":"v4.0.0-rc.2"}],["$","div",null,{"className":"header","children":["$","div",null,{"className":"miniHeader","children":["$","div",null,{"className":"miniHeaderContents","children":[["$","$L16",null,{}],["$","$L17",null,{"versions":["v4.0.0-rc.2","v3.8.1","latest@main"],"currentVersion":"v4.0.0-rc.2"}]]}]}]}],["$","div",null,{"className":"pageBody","children":["$","div",null,{"className":"contents","children":["$","$L11",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$12","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L14",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}]}]]}],null]]},["$","$L11",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L14",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L11",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L14",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f4479af2108893f8.css","precedence":"next","crossOrigin":""}]],"$L18"]]]]
18:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"OrderedSet — Immutable.js"}],["$","link","3",{"rel":"icon","href":"/favicon.png"}]]
1:null
