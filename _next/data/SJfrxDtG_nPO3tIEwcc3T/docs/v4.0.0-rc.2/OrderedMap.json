{"pageProps":{"versions":["v4.0.0-rc.2","v3.8.1","latest@main"],"version":"v4.0.0-rc.2","def":{"qualifiedName":"OrderedMap","doc":{"synopsis":"<p>A type of Map that has the additional guarantee that the iteration order of\nentries will be the order in which they were set().</p>\n","description":"<p>The iteration behavior of OrderedMap is the same as native ES6 Map and\nJavaScript Object.</p>\n<p>Note that <code><a href=\"/docs/v4.0.0-rc.2/OrderedMap\">OrderedMap</a></code> are more expensive than non-ordered <code><a href=\"/docs/v4.0.0-rc.2/Map\">Map</a></code> and may\nconsume more memory. <code><a href=\"/docs/v4.0.0-rc.2/OrderedMap#set()\">OrderedMap#set</a></code> is amortized O(log32 N), but not\nstable.</p>\n","notes":[]},"functions":{"isOrderedMap":{"name":"OrderedMap.isOrderedMap","label":"OrderedMap.isOrderedMap()","id":"isOrderedMap()","isStatic":true,"signatures":[{"line":1413,"params":[{"name":"maybeOrderedMap","type":{"k":1}}],"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#isOrderedMap()"}},"call":{"name":"OrderedMap","label":"OrderedMap()","id":"OrderedMap()","signatures":[{"line":1429,"typeParams":["K","V"],"params":[{"name":"collection","type":{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":11,"param":"K"},{"k":11,"param":"V"}]}]}}],"type":{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v4.0.0-rc.2/OrderedMap"}},{"line":1430,"typeParams":["T"],"params":[{"name":"collection","type":{"k":12,"name":"Iterable","args":[{"k":12,"name":"Iterable","args":[{"k":11,"param":"T"}]}]}}],"type":{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"T"},{"k":11,"param":"T"}],"url":"/docs/v4.0.0-rc.2/OrderedMap"}},{"line":1431,"typeParams":["V"],"params":[{"name":"obj","type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"V"}}]}}],"type":{"k":12,"name":"OrderedMap","args":[{"k":7},{"k":11,"param":"V"}],"url":"/docs/v4.0.0-rc.2/OrderedMap"}},{"line":1432,"typeParams":["K","V"],"type":{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v4.0.0-rc.2/OrderedMap"}},{"line":1433,"type":{"k":12,"name":"OrderedMap","args":[{"k":1},{"k":1}],"url":"/docs/v4.0.0-rc.2/OrderedMap"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#OrderedMap()"},"interface":{"members":{"concat":{"name":"concat","label":"concat()","id":"concat()","group":"Sequence algorithms","signatures":[{"line":1442,"typeParams":["KC","VC"],"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":11,"param":"KC"},{"k":11,"param":"VC"}]}]}]},"varArgs":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":13,"types":[{"k":11,"param":"K"},{"k":11,"param":"KC"}]},{"k":13,"types":[{"k":11,"param":"V"},{"k":11,"param":"VC"}]}],"url":"/docs/v4.0.0-rc.2/OrderedMap"}},{"line":1443,"typeParams":["C"],"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"C"}}]}]},"varArgs":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":13,"types":[{"k":11,"param":"K"},{"k":7}]},{"k":13,"types":[{"k":11,"param":"V"},{"k":11,"param":"C"}]}],"url":"/docs/v4.0.0-rc.2/OrderedMap"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#concat()","overrides":{"interface":"Map","label":"concat()","url":"/docs/v4.0.0-rc.2/Map#concat()"}},"map":{"name":"map","label":"map()","id":"map()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new OrderedMap with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n","description":"<code class=\"codeBlock\"><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap { \"a\": 10, \"b\": 20 }</span></code><p>Note: <code><a href=\"/docs/v4.0.0-rc.2/OrderedMap#map()\">map()</a></code> always returns a new instance, even if it produced the same\nvalue at every step.</p>\n","notes":[]},"signatures":[{"line":1455,"typeParams":["M"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"M"}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"K"},{"k":11,"param":"M"}],"url":"/docs/v4.0.0-rc.2/OrderedMap"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#map()","overrides":{"interface":"Map","label":"map()","url":"/docs/v4.0.0-rc.2/Map#map()"}},"mapKeys":{"name":"mapKeys","label":"mapKeys()","id":"mapKeys()","group":"Sequence algorithms","doc":{"synopsis":"","description":"","notes":[{"name":"see","body":"<p>Collection.Keyed.mapKeys</p>\n"}]},"signatures":[{"line":1463,"typeParams":["M"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"key","type":{"k":11,"param":"K"}},{"name":"value","type":{"k":11,"param":"V"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"M"}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"M"},{"k":11,"param":"V"}],"url":"/docs/v4.0.0-rc.2/OrderedMap"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#mapKeys()","overrides":{"interface":"Map","label":"mapKeys()","url":"/docs/v4.0.0-rc.2/Map#mapKeys()"}},"mapEntries":{"name":"mapEntries","label":"mapEntries()","id":"mapEntries()","group":"Sequence algorithms","doc":{"synopsis":"","description":"","notes":[{"name":"see","body":"<p>Collection.Keyed.mapEntries</p>\n"}]},"signatures":[{"line":1471,"typeParams":["KM","VM"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"entry","type":{"k":15,"types":[{"k":11,"param":"K"},{"k":11,"param":"V"}]}},{"name":"index","type":{"k":6}},{"name":"iter","type":{"k":3}}],"type":{"k":15,"types":[{"k":11,"param":"KM"},{"k":11,"param":"VM"}]}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"KM"},{"k":11,"param":"VM"}],"url":"/docs/v4.0.0-rc.2/OrderedMap"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#mapEntries()","overrides":{"interface":"Map","label":"mapEntries()","url":"/docs/v4.0.0-rc.2/Map#mapEntries()"}},"flatMap":{"name":"flatMap","label":"flatMap()","id":"flatMap()","group":"Sequence algorithms","doc":{"synopsis":"<p>Flat-maps the OrderedMap, returning a new OrderedMap.</p>\n","description":"<p>Similar to <code>data<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flatten<span class=\"token punctuation\" >(</span><span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span></code>.</p>\n","notes":[]},"signatures":[{"line":1481,"typeParams":["KM","VM"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":11,"param":"KM"},{"k":11,"param":"VM"}]}]}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"KM"},{"k":11,"param":"VM"}],"url":"/docs/v4.0.0-rc.2/OrderedMap"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#flatMap()","overrides":{"interface":"Map","label":"flatMap()","url":"/docs/v4.0.0-rc.2/Map#flatMap()"}},"filter":{"name":"filter","label":"filter()","id":"filter()","group":"Sequence algorithms","signatures":[{"line":1493,"typeParams":["F"],"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"K"},{"k":11,"param":"F"}],"url":"/docs/v4.0.0-rc.2/OrderedMap"}},{"line":1497,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":1}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#filter()","overrides":{"interface":"Map","label":"filter()","url":"/docs/v4.0.0-rc.2/Map#filter()"}},"set":{"name":"set","label":"set()","id":"set()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new Map also containing the new key, value pair. If an equivalent\nkey already exists in this Map, it will be replaced.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> originalMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> newerMap <span class=\"token operator\" >=</span> originalMap<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'key'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'value'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> newestMap <span class=\"token operator\" >=</span> newerMap<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'key'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'newer value'</span><span class=\"token punctuation\" >)</span></p>\n<p>originalMap\n<span class=\"token comment\" spellcheck=\"true\">// Map {}\n</span>newerMap\n<span class=\"token comment\" spellcheck=\"true\">// Map { &quot;key&quot;: &quot;value&quot; }\n</span>newestMap\n<span class=\"token comment\" spellcheck=\"true\">// Map { &quot;key&quot;: &quot;newer value&quot; }</span></code><p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Map#set()\">set</a></code> can be used in <code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">withMutations</a></code>.</p></p>\n","notes":[]},"signatures":[{"line":906,"params":[{"name":"key","type":{"k":11,"param":"K"}},{"name":"value","type":{"k":11,"param":"V"}}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#set()","inherited":{"interface":"Map","label":"set()","url":"/docs/v4.0.0-rc.2/Map#set()"}},"delete":{"name":"delete","label":"delete()","id":"delete()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new Map which excludes this <code><span class=\"t param\">key</span></code>.</p>\n","description":"<p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Map#delete()\">delete</a></code> cannot be safely used in IE8, but is provided to mirror\nthe ES6 collection API.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> originalMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  key<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'value'</span><span class=\"token punctuation\" >,</span>\n  otherKey<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'other value'</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"key\": \"value\", \"otherKey\": \"other value\" }\n</span>originalMap<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >delete</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'otherKey'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"key\": \"value\" }</span></code><p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Map#delete()\">delete</a></code> can be used in <code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">withMutations</a></code>.</p>\n","notes":[{"name":"alias","body":"remove"}]},"signatures":[{"line":929,"params":[{"name":"key","type":{"k":11,"param":"K"}}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#delete()","inherited":{"interface":"Map","label":"delete()","url":"/docs/v4.0.0-rc.2/Map#delete()"}},"deleteAll":{"name":"deleteAll","label":"deleteAll()","id":"deleteAll()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new Map which excludes the provided <code><span class=\"t param\">keys</span></code>.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> names <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Aaron\"</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Barry\"</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Connor\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\nnames<span class=\"token punctuation\" >.</span>deleteAll<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"b\": \"Barry\" }</span></code><p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Map#deleteAll()\">deleteAll</a></code> can be used in <code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">withMutations</a></code>.</p></p>\n","notes":[{"name":"alias","body":"removeAll"}]},"signatures":[{"line":946,"params":[{"name":"keys","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"K"}]}}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#deleteAll()","inherited":{"interface":"Map","label":"deleteAll()","url":"/docs/v4.0.0-rc.2/Map#deleteAll()"}},"clear":{"name":"clear","label":"clear()","id":"clear()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new Map containing no keys or values.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> key<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'value'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>clear<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {}</span></code><p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Map#clear()\">clear</a></code> can be used in <code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">withMutations</a></code>.</p></p>\n","notes":[]},"signatures":[{"line":960,"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#clear()","inherited":{"interface":"Map","label":"clear()","url":"/docs/v4.0.0-rc.2/Map#clear()"}},"update":{"name":"update","label":"update()","id":"update()","group":"Persistent changes","signatures":[{"line":1045,"params":[{"name":"key","type":{"k":11,"param":"K"}},{"name":"notSetValue","type":{"k":11,"param":"V"}},{"name":"updater","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}}],"type":{"k":11,"param":"V"}}}],"type":{"k":3}},{"line":1046,"params":[{"name":"key","type":{"k":11,"param":"K"}},{"name":"updater","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}}],"type":{"k":11,"param":"V"}}}],"type":{"k":3}},{"line":1047,"typeParams":["R"],"params":[{"name":"updater","type":{"k":10,"params":[{"name":"value","type":{"k":3}}],"type":{"k":11,"param":"R"}}}],"type":{"k":11,"param":"R"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#update()","inherited":{"interface":"Map","label":"update()","url":"/docs/v4.0.0-rc.2/Map#update()"}},"merge":{"name":"merge","label":"merge()","id":"merge()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new Map resulting from merging the provided Collections\n(or JS objects) into this Map. In other words, this takes each entry of\neach collection and sets it on this Map.</p>\n","description":"<p>If any of the values provided to <code><a href=\"/docs/v4.0.0-rc.2/Map#merge()\">merge</a></code> are not Collection (would return\nfalse for <code><a href=\"/docs/v4.0.0-rc.2/isCollection()\">isCollection</a></code>) then they are deeply converted\nvia <code><a href=\"/docs/v4.0.0-rc.2/fromJS()\">fromJS</a></code> before being merged. However, if the value is an\nCollection but includes non-collection JS objects or arrays, those nested\nvalues will be preserved.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> one <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >30</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> two <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >,</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >60</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\none<span class=\"token punctuation\" >.</span>merge<span class=\"token punctuation\" >(</span>two<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// Map { \"a\": 50, \"b\": 40, \"c\": 30, \"d\": 60 }\n</span>two<span class=\"token punctuation\" >.</span>merge<span class=\"token punctuation\" >(</span>one<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// Map { \"b\": 20, \"a\": 10, \"d\": 60, \"c\": 30 }</span></code><p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Map#merge()\">merge</a></code> can be used in <code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">withMutations</a></code>.</p>\n","notes":[]},"signatures":[{"line":1070,"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":12,"name":"Collection","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"V"}}]}]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#merge()","inherited":{"interface":"Map","label":"merge()","url":"/docs/v4.0.0-rc.2/Map#merge()"}},"mergeWith":{"name":"mergeWith","label":"mergeWith()","id":"mergeWith()","group":"Persistent changes","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v4.0.0-rc.2/Map#merge()\">merge()</a></code>, <code><a href=\"/docs/v4.0.0-rc.2/Map#mergeWith()\">mergeWith()</a></code> returns a new Map resulting from merging\nthe provided Collections (or JS objects) into this Map, but uses the\n<code><span class=\"t param\">merger</span></code> function for dealing with conflicts.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> one <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >30</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> two <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >,</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >60</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\none<span class=\"token punctuation\" >.</span>mergeWith<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>oldVal<span class=\"token punctuation\" >,</span> newVal<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> oldVal <span class=\"token operator\" >/</span> newVal<span class=\"token punctuation\" >,</span> two<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// { \"a\": 0.2, \"b\": 0.5, \"c\": 30, \"d\": 60 }\n</span>two<span class=\"token punctuation\" >.</span>mergeWith<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>oldVal<span class=\"token punctuation\" >,</span> newVal<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> oldVal <span class=\"token operator\" >/</span> newVal<span class=\"token punctuation\" >,</span> one<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// { \"b\": 2, \"a\": 5, \"d\": 60, \"c\": 30 }</span></code><p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Map#mergeWith()\">mergeWith</a></code> can be used in <code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">withMutations</a></code>.</p></p>\n","notes":[]},"signatures":[{"line":1089,"params":[{"name":"merger","type":{"k":10,"params":[{"name":"oldVal","type":{"k":11,"param":"V"}},{"name":"newVal","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}}],"type":{"k":11,"param":"V"}}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":12,"name":"Collection","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"V"}}]}]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#mergeWith()","inherited":{"interface":"Map","label":"mergeWith()","url":"/docs/v4.0.0-rc.2/Map#mergeWith()"}},"mergeDeep":{"name":"mergeDeep","label":"mergeDeep()","id":"mergeDeep()","group":"Persistent changes","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v4.0.0-rc.2/Map#merge()\">merge()</a></code>, but when two Collections conflict, it merges them as well,\nrecursing deeply through the nested data.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> one <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> two <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >5</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\none<span class=\"token punctuation\" >.</span>mergeDeep<span class=\"token punctuation\" >(</span>two<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   \"a\": Map { \"x\": 2, \"y\": 10 },\n</span><span class=\"token comment\" spellcheck=\"true\">//   \"b\": Map { \"x\": 20, \"y\": 5 },\n</span><span class=\"token comment\" spellcheck=\"true\">//   \"c\": Map { \"z\": 3 }\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span></code><p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Map#mergeDeep()\">mergeDeep</a></code> can be used in <code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">withMutations</a></code>.</p></p>\n","notes":[]},"signatures":[{"line":1112,"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":12,"name":"Collection","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"V"}}]}]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#mergeDeep()","inherited":{"interface":"Map","label":"mergeDeep()","url":"/docs/v4.0.0-rc.2/Map#mergeDeep()"}},"mergeDeepWith":{"name":"mergeDeepWith","label":"mergeDeepWith()","id":"mergeDeepWith()","group":"Persistent changes","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v4.0.0-rc.2/Map#mergeDeep()\">mergeDeep()</a></code>, but when two non-Collections conflict, it uses the\n<code><span class=\"t param\">merger</span></code> function to determine the resulting value.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> one <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> two <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >5</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\none<span class=\"token punctuation\" >.</span>mergeDeepWith<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>oldVal<span class=\"token punctuation\" >,</span> newVal<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> oldVal <span class=\"token operator\" >/</span> newVal<span class=\"token punctuation\" >,</span> two<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   \"a\": Map { \"x\": 5, \"y\": 10 },\n</span><span class=\"token comment\" spellcheck=\"true\">//   \"b\": Map { \"x\": 20, \"y\": 10 },\n</span><span class=\"token comment\" spellcheck=\"true\">//   \"c\": Map { \"z\": 3 }\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span></code><p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Map#mergeDeepWith()\">mergeDeepWith</a></code> can be used in <code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">withMutations</a></code>.</p></p>\n","notes":[]},"signatures":[{"line":1132,"params":[{"name":"merger","type":{"k":10,"params":[{"name":"oldVal","type":{"k":11,"param":"V"}},{"name":"newVal","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}}],"type":{"k":11,"param":"V"}}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":12,"name":"Collection","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"V"}}]}]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#mergeDeepWith()","inherited":{"interface":"Map","label":"mergeDeepWith()","url":"/docs/v4.0.0-rc.2/Map#mergeDeepWith()"}},"setIn":{"name":"setIn","label":"setIn()","id":"setIn()","group":"Deep persistent changes","doc":{"synopsis":"<p>Returns a new Map having set <code><span class=\"t param\">value</span></code> at this <code><span class=\"t param\">keyPath</span></code>. If any keys in\n<code><span class=\"t param\">keyPath</span></code> do not exist, a new immutable Map will be created at that key.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> originalMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  subObject<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n    subKey<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'subvalue'</span><span class=\"token punctuation\" >,</span>\n    subSubObject<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n      subSubKey<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'subSubValue'</span>\n    <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span></p>\n<p><span class=\"token keyword\" >const</span> newMap <span class=\"token operator\" >=</span> originalMap<span class=\"token punctuation\" >.</span>setIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >&#39;subObject&#39;</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >&#39;subKey&#39;</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >&#39;ha ha!&#39;</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   &quot;subObject&quot;: Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//     &quot;subKey&quot;: &quot;ha ha!&quot;,\n</span><span class=\"token comment\" spellcheck=\"true\">//     &quot;subSubObject&quot;: Map { &quot;subSubKey&quot;: &quot;subSubValue&quot; }\n</span><span class=\"token comment\" spellcheck=\"true\">//   }\n</span><span class=\"token comment\" spellcheck=\"true\">// }\n</span>\n<span class=\"token keyword\" >const</span> newerMap <span class=\"token operator\" >=</span> originalMap<span class=\"token punctuation\" >.</span>setIn<span class=\"token punctuation\" >(</span>\n  <span class=\"token punctuation\" >[</span><span class=\"token string\" >&#39;subObject&#39;</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >&#39;subSubObject&#39;</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >&#39;subSubKey&#39;</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token string\" >&#39;ha ha ha!&#39;</span>\n<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   &quot;subObject&quot;: Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//     &quot;subKey&quot;: &quot;ha ha!&quot;,\n</span><span class=\"token comment\" spellcheck=\"true\">//     &quot;subSubObject&quot;: Map { &quot;subSubKey&quot;: &quot;ha ha ha!&quot; }\n</span><span class=\"token comment\" spellcheck=\"true\">//   }\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span></code><p>If any key in the path exists but does not have a <code><span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> method\n(such as Map and List), an error will be throw.</p></p>\n<p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Map#setIn()\">setIn</a></code> can be used in <code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">withMutations</a></code>.</p>\n","notes":[]},"signatures":[{"line":1180,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":1}]}},{"name":"value","type":{"k":1}}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#setIn()","inherited":{"interface":"Map","label":"setIn()","url":"/docs/v4.0.0-rc.2/Map#setIn()"}},"deleteIn":{"name":"deleteIn","label":"deleteIn()","id":"deleteIn()","group":"Deep persistent changes","doc":{"synopsis":"<p>Returns a new Map having removed the value at this <code><span class=\"t param\">keyPath</span></code>. If any keys\nin <code><span class=\"t param\">keyPath</span></code> do not exist, no change will occur.</p>\n","description":"<p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Map#deleteIn()\">deleteIn</a></code> can be used in <code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">withMutations</a></code>.</p>\n","notes":[{"name":"alias","body":"removeIn"}]},"signatures":[{"line":1190,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":1}]}}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#deleteIn()","inherited":{"interface":"Map","label":"deleteIn()","url":"/docs/v4.0.0-rc.2/Map#deleteIn()"}},"updateIn":{"name":"updateIn","label":"updateIn()","id":"updateIn()","group":"Deep persistent changes","signatures":[{"line":1244,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":1}]}},{"name":"notSetValue","type":{"k":1}},{"name":"updater","type":{"k":10,"params":[{"name":"value","type":{"k":1}}],"type":{"k":1}}}],"type":{"k":3}},{"line":1245,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":1}]}},{"name":"updater","type":{"k":10,"params":[{"name":"value","type":{"k":1}}],"type":{"k":1}}}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#updateIn()","inherited":{"interface":"Map","label":"updateIn()","url":"/docs/v4.0.0-rc.2/Map#updateIn()"}},"mergeIn":{"name":"mergeIn","label":"mergeIn()","id":"mergeIn()","group":"Deep persistent changes","doc":{"synopsis":"<p>A combination of <code><a href=\"/docs/v4.0.0-rc.2/Map#updateIn()\">updateIn</a></code> and <code><a href=\"/docs/v4.0.0-rc.2/Map#merge()\">merge</a></code>, returning a new Map, but\nperforming the merge at a point arrived at by following the keyPath.\nIn other words, these two lines are equivalent:</p>\n","description":"<p><code class=\"codeBlock\">map<span class=\"token punctuation\" >.</span>updateIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> abc <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> abc<span class=\"token punctuation\" >.</span>merge<span class=\"token punctuation\" >(</span>y<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\nmap<span class=\"token punctuation\" >.</span>mergeIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >)</span></code><p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Map#mergeIn()\">mergeIn</a></code> can be used in <code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">withMutations</a></code>.</p></p>\n","notes":[]},"signatures":[{"line":1259,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":1}]}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":1}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#mergeIn()","inherited":{"interface":"Map","label":"mergeIn()","url":"/docs/v4.0.0-rc.2/Map#mergeIn()"}},"mergeDeepIn":{"name":"mergeDeepIn","label":"mergeDeepIn()","id":"mergeDeepIn()","group":"Deep persistent changes","doc":{"synopsis":"<p>A combination of <code><a href=\"/docs/v4.0.0-rc.2/Map#updateIn()\">updateIn</a></code> and <code><a href=\"/docs/v4.0.0-rc.2/Map#mergeDeep()\">mergeDeep</a></code>, returning a new Map, but\nperforming the deep merge at a point arrived at by following the keyPath.\nIn other words, these two lines are equivalent:</p>\n","description":"<p><code class=\"codeBlock\">map<span class=\"token punctuation\" >.</span>updateIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> abc <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> abc<span class=\"token punctuation\" >.</span>mergeDeep<span class=\"token punctuation\" >(</span>y<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\nmap<span class=\"token punctuation\" >.</span>mergeDeepIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >)</span></code><p>Note: <code><a href=\"/docs/v4.0.0-rc.2/Map#mergeDeepIn()\">mergeDeepIn</a></code> can be used in <code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">withMutations</a></code>.</p></p>\n","notes":[]},"signatures":[{"line":1273,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":1}]}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":1}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#mergeDeepIn()","inherited":{"interface":"Map","label":"mergeDeepIn()","url":"/docs/v4.0.0-rc.2/Map#mergeDeepIn()"}},"withMutations":{"name":"withMutations","label":"withMutations()","id":"withMutations()","group":"Transient changes","doc":{"synopsis":"<p>Every time you call one of the above functions, a new immutable Map is\ncreated. If a pure function calls a number of these to produce a final\nreturn value, then a penalty on performance and memory has been paid by\ncreating all of the intermediate immutable Maps.</p>\n","description":"<p>If you need to apply a series of mutations to produce a new immutable\nMap, <code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">withMutations()</a></code> creates a temporary mutable copy of the Map which\ncan apply mutations in a highly performant manner. In fact, this is\nexactly how complex mutations like <code><a href=\"/docs/v4.0.0-rc.2/Map#merge()\">merge</a></code> are done.</p>\n<p>As an example, this results in the creation of 2, not 4, new Maps:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> map1 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> map2 <span class=\"token operator\" >=</span> map1<span class=\"token punctuation\" >.</span>withMutations<span class=\"token punctuation\" >(</span>map <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  map<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'c'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\nassert<span class=\"token punctuation\" >(</span>map1<span class=\"token punctuation\" >.</span>size <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\nassert<span class=\"token punctuation\" >(</span>map2<span class=\"token punctuation\" >.</span>size <span class=\"token operator\" >===</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span></code><p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">withMutations</a></code>! Read the documentation for each method to see if it\nis safe to use in <code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">withMutations</a></code>.</p>\n","notes":[]},"signatures":[{"line":1304,"params":[{"name":"mutator","type":{"k":10,"params":[{"name":"mutable","type":{"k":3}}],"type":{"k":1}}}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#withMutations()","inherited":{"interface":"Map","label":"withMutations()","url":"/docs/v4.0.0-rc.2/Map#withMutations()"}},"asMutable":{"name":"asMutable","label":"asMutable()","id":"asMutable()","group":"Transient changes","doc":{"synopsis":"<p>Another way to avoid creation of intermediate Immutable maps is to create\na mutable copy of this collection. Mutable copies <em>always</em> return <code><span class=\"token var\" >this</span></code>,\nand thus shouldn&#39;t be used for equality. Your function should never return\na mutable copy of a collection, only use it internally to create a new\ncollection. If possible, use <code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">withMutations</a></code> as it provides an easier to\nuse API.</p>\n","description":"<p>Note: if the collection is already mutable, <code><a href=\"/docs/v4.0.0-rc.2/Map#asMutable()\">asMutable</a></code> returns itself.</p>\n<p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">withMutations</a></code>! Read the documentation for each method to see if it\nis safe to use in <code><a href=\"/docs/v4.0.0-rc.2/Map#withMutations()\">withMutations</a></code>.</p>\n","notes":[]},"signatures":[{"line":1320,"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#asMutable()","inherited":{"interface":"Map","label":"asMutable()","url":"/docs/v4.0.0-rc.2/Map#asMutable()"}},"asImmutable":{"name":"asImmutable","label":"asImmutable()","id":"asImmutable()","group":"Transient changes","doc":{"synopsis":"<p>The yin to <code><a href=\"/docs/v4.0.0-rc.2/Map#asMutable()\">asMutable</a></code>&#39;s yang. Because it applies to mutable collections,\nthis operation is <em>mutable</em> and returns itself. Once performed, the mutable\ncopy has become immutable and can be safely returned from a function.</p>\n","description":"","notes":[]},"signatures":[{"line":1327,"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#asImmutable()","inherited":{"interface":"Map","label":"asImmutable()","url":"/docs/v4.0.0-rc.2/Map#asImmutable()"}},"toJS":{"name":"toJS","label":"toJS()","id":"toJS()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Deeply converts this Keyed collection to equivalent native JavaScript Object.</p>\n","description":"<p>Converts keys to Strings.</p>\n","notes":[]},"signatures":[{"line":2766,"type":{"k":12,"name":"Object"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#toJS()","inherited":{"interface":"Collection.Keyed","label":"toJS()","url":"/docs/v4.0.0-rc.2/Collection.Keyed#toJS()"}},"toJSON":{"name":"toJSON","label":"toJSON()","id":"toJSON()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this Keyed collection to equivalent native JavaScript Object.</p>\n","description":"<p>Converts keys to Strings.</p>\n","notes":[]},"signatures":[{"line":2773,"type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"V"}}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#toJSON()","inherited":{"interface":"Collection.Keyed","label":"toJSON()","url":"/docs/v4.0.0-rc.2/Collection.Keyed#toJSON()"}},"toSeq":{"name":"toSeq","label":"toSeq()","id":"toSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns Seq.Keyed.</p>\n","description":"","notes":[]},"signatures":[{"line":2779,"type":{"k":12,"name":"Seq.Keyed","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v4.0.0-rc.2/Seq.Keyed"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#toSeq()","inherited":{"interface":"Collection.Keyed","label":"toSeq()","url":"/docs/v4.0.0-rc.2/Collection.Keyed#toSeq()"}},"flip":{"name":"flip","label":"flip()","id":"flip()","group":"Sequence functions","doc":{"synopsis":"<p>Returns a new Collection.Keyed of the same type where the keys and values\nhave been flipped.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'z'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'y'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flip<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"z\": \"a\", \"y\": \"b\" }</span></code></p>\n","notes":[]},"signatures":[{"line":2794,"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#flip()","inherited":{"interface":"Collection.Keyed","label":"flip()","url":"/docs/v4.0.0-rc.2/Collection.Keyed#flip()"}},"[Symbol.iterator]":{"name":"[Symbol.iterator]","label":"[Symbol.iterator]()","id":"[Symbol.iterator]()","group":"Sequence functions","signatures":[{"line":2883,"type":{"k":12,"name":"IterableIterator","args":[{"k":15,"types":[{"k":11,"param":"K"},{"k":11,"param":"V"}]}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#[Symbol.iterator]()","inherited":{"interface":"Collection.Keyed","label":"[Symbol.iterator]()","url":"/docs/v4.0.0-rc.2/Collection.Keyed#[Symbol.iterator]()"}},"equals":{"name":"equals","label":"equals()","id":"equals()","group":"Value equality","doc":{"synopsis":"<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/v4.0.0-rc.2/is()\">Immutable.is()</a></code>.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":3254,"params":[{"name":"other","type":{"k":1}}],"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#equals()","inherited":{"interface":"Collection","label":"equals()","url":"/docs/v4.0.0-rc.2/Collection#equals()"}},"hashCode":{"name":"hashCode","label":"hashCode()","id":"hashCode()","group":"Value equality","doc":{"synopsis":"<p>Computes and returns the hashed identity for this Collection.</p>\n","description":"<p>The <code><a href=\"/docs/v4.0.0-rc.2/List#hashCode()\">hashCode</a></code> of an Collection is used to determine potential equality,\nand is used when adding this to a <code><a href=\"/docs/v4.0.0-rc.2/Set\">Set</a></code> or as a key in a <code><a href=\"/docs/v4.0.0-rc.2/Map\">Map</a></code>, enabling\nlookup via a different instance.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> a <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> b <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >!</span><span class=\"token operator\" >==</span> b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// different instances\n</span><span class=\"token keyword\" >const</span> <span class=\"token keyword\" >set</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> a <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >(</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >===</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p>If two values have the same <code><a href=\"/docs/v4.0.0-rc.2/List#hashCode()\">hashCode</a></code>, they are <a href=\"http://en.wikipedia.org/wiki/Collision_(computer_science)\">not guaranteed\nto be equal</a>. If two values have different <code><a href=\"/docs/v4.0.0-rc.2/List#hashCode()\">hashCode</a></code>s,\nthey must not be equal.</p>\n","notes":[]},"signatures":[{"line":3277,"type":{"k":6}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#hashCode()","inherited":{"interface":"Collection","label":"hashCode()","url":"/docs/v4.0.0-rc.2/Collection#hashCode()"}},"get":{"name":"get","label":"get()","id":"get()","group":"Reading values","signatures":[{"line":3290,"typeParams":["NSV"],"params":[{"name":"key","type":{"k":11,"param":"K"}},{"name":"notSetValue","type":{"k":11,"param":"NSV"}}],"type":{"k":13,"types":[{"k":11,"param":"V"},{"k":11,"param":"NSV"}]}},{"line":3291,"params":[{"name":"key","type":{"k":11,"param":"K"}}],"type":{"k":13,"types":[{"k":11,"param":"V"},{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#get()","inherited":{"interface":"Collection","label":"get()","url":"/docs/v4.0.0-rc.2/Collection#get()"}},"has":{"name":"has","label":"has()","id":"has()","group":"Reading values","doc":{"synopsis":"<p>True if a key exists within this <code><a href=\"/docs/v4.0.0-rc.2/Collection\">Collection</a></code>, using <code><a href=\"/docs/v4.0.0-rc.2/is()\">Immutable.is</a></code>\nto determine equality</p>\n","description":"","notes":[]},"signatures":[{"line":3297,"params":[{"name":"key","type":{"k":11,"param":"K"}}],"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#has()","inherited":{"interface":"Collection","label":"has()","url":"/docs/v4.0.0-rc.2/Collection#has()"}},"includes":{"name":"includes","label":"includes()","id":"includes()","group":"Reading values","doc":{"synopsis":"<p>True if a value exists within this <code><a href=\"/docs/v4.0.0-rc.2/Collection\">Collection</a></code>, using <code><a href=\"/docs/v4.0.0-rc.2/is()\">Immutable.is</a></code>\nto determine equality</p>\n","description":"","notes":[{"name":"alias","body":"contains"}]},"signatures":[{"line":3304,"params":[{"name":"value","type":{"k":11,"param":"V"}}],"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#includes()","inherited":{"interface":"Collection","label":"includes()","url":"/docs/v4.0.0-rc.2/Collection#includes()"}},"first":{"name":"first","label":"first()","id":"first()","group":"Reading values","doc":{"synopsis":"<p>The first value in the Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":3310,"type":{"k":13,"types":[{"k":11,"param":"V"},{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#first()","inherited":{"interface":"Collection","label":"first()","url":"/docs/v4.0.0-rc.2/Collection#first()"}},"last":{"name":"last","label":"last()","id":"last()","group":"Reading values","doc":{"synopsis":"<p>The last value in the Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":3315,"type":{"k":13,"types":[{"k":11,"param":"V"},{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#last()","inherited":{"interface":"Collection","label":"last()","url":"/docs/v4.0.0-rc.2/Collection#last()"}},"getIn":{"name":"getIn","label":"getIn()","id":"getIn()","group":"Reading deep values","doc":{"synopsis":"<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n","description":"","notes":[]},"signatures":[{"line":3324,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Iterable","args":[{"k":1}]}},{"name":"notSetValue","type":{"k":1},"optional":true}],"type":{"k":1}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#getIn()","inherited":{"interface":"Collection","label":"getIn()","url":"/docs/v4.0.0-rc.2/Collection#getIn()"}},"hasIn":{"name":"hasIn","label":"hasIn()","id":"hasIn()","group":"Reading deep values","doc":{"synopsis":"<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n","description":"","notes":[]},"signatures":[{"line":3330,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Iterable","args":[{"k":1}]}}],"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#hasIn()","inherited":{"interface":"Collection","label":"hasIn()","url":"/docs/v4.0.0-rc.2/Collection#hasIn()"}},"toArray":{"name":"toArray","label":"toArray()","id":"toArray()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this collection to an Array, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":3378,"type":{"k":12,"name":"Array","args":[{"k":11,"param":"V"}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#toArray()","inherited":{"interface":"Collection","label":"toArray()","url":"/docs/v4.0.0-rc.2/Collection#toArray()"}},"toObject":{"name":"toObject","label":"toObject()","id":"toObject()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this Collection to an Object.</p>\n","description":"<p>Converts keys to Strings.</p>\n","notes":[]},"signatures":[{"line":3385,"type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"V"}}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#toObject()","inherited":{"interface":"Collection","label":"toObject()","url":"/docs/v4.0.0-rc.2/Collection#toObject()"}},"toMap":{"name":"toMap","label":"toMap()","id":"toMap()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":3396,"type":{"k":12,"name":"Map","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v4.0.0-rc.2/Map"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#toMap()","inherited":{"interface":"Collection","label":"toMap()","url":"/docs/v4.0.0-rc.2/Collection#toMap()"}},"toOrderedMap":{"name":"toOrderedMap","label":"toOrderedMap()","id":"toOrderedMap()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":3404,"type":{"k":12,"name":"OrderedMap","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v4.0.0-rc.2/OrderedMap"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#toOrderedMap()","inherited":{"interface":"Collection","label":"toOrderedMap()","url":"/docs/v4.0.0-rc.2/Collection#toOrderedMap()"}},"toSet":{"name":"toSet","label":"toSet()","id":"toSet()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><a href=\"/docs/v4.0.0-rc.2/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n","notes":[]},"signatures":[{"line":3413,"type":{"k":12,"name":"Set","args":[{"k":11,"param":"V"}],"url":"/docs/v4.0.0-rc.2/Set"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#toSet()","inherited":{"interface":"Collection","label":"toSet()","url":"/docs/v4.0.0-rc.2/Collection#toSet()"}},"toOrderedSet":{"name":"toOrderedSet","label":"toOrderedSet()","id":"toOrderedSet()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>valueSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":3422,"type":{"k":12,"name":"OrderedSet","args":[{"k":11,"param":"V"}],"url":"/docs/v4.0.0-rc.2/OrderedSet"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#toOrderedSet()","inherited":{"interface":"Collection","label":"toOrderedSet()","url":"/docs/v4.0.0-rc.2/Collection#toOrderedSet()"}},"toList":{"name":"toList","label":"toList()","id":"toList()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a List, discarding keys.</p>\n","description":"<p>This is similar to <code><a href=\"/docs/v4.0.0-rc.2/List\">List(collection)</a></code>, but provided to allow for chained\nexpressions. However, when called on <code><a href=\"/docs/v4.0.0-rc.2/Map\">Map</a></code> or other keyed collections,\n<code>collection<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> discards the keys and creates a list of only the\nvalues, whereas <code><a href=\"/docs/v4.0.0-rc.2/List\">List(collection)</a></code> creates a list of entry tuples.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >var</span> myMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Apple'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Banana'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>myMap<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ [ \"a\", \"Apple\" ], [ \"b\", \"Banana\" ] ]\n</span>myMap<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ \"Apple\", \"Banana\" ]</span></code>","notes":[]},"signatures":[{"line":3439,"type":{"k":12,"name":"List","args":[{"k":11,"param":"V"}],"url":"/docs/v4.0.0-rc.2/List"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#toList()","inherited":{"interface":"Collection","label":"toList()","url":"/docs/v4.0.0-rc.2/Collection#toList()"}},"toStack":{"name":"toStack","label":"toStack()","id":"toStack()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><a href=\"/docs/v4.0.0-rc.2/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n","notes":[]},"signatures":[{"line":3448,"type":{"k":12,"name":"Stack","args":[{"k":11,"param":"V"}],"url":"/docs/v4.0.0-rc.2/Stack"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#toStack()","inherited":{"interface":"Collection","label":"toStack()","url":"/docs/v4.0.0-rc.2/Collection#toStack()"}},"toKeyedSeq":{"name":"toKeyedSeq","label":"toKeyedSeq()","id":"toKeyedSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n","description":"<p>This is useful if you want to operate on an\nCollection.Indexed and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Collection.</p>\n<p>```js\nconst { Seq } = require(&#39;immutable&#39;)\nconst indexedSeq = Seq([ &#39;A&#39;, &#39;B&#39;, &#39;C&#39; ])\n// Seq [ &quot;A&quot;, &quot;B&quot;, &quot;C&quot; ]\nindexedSeq.filter(v =&gt; v === &#39;B&#39;)\n// Seq [ &quot;B&quot; ]\nconst keyedSeq = indexedSeq.toKeyedSeq()\n// Seq { 0: &quot;A&quot;, 1: &quot;B&quot;, 2: &quot;C&quot; }\nkeyedSeq.filter(v =&gt; v === &#39;B&#39;)\n// Seq { 1: &quot;B&quot; }</p>\n","notes":[]},"signatures":[{"line":3479,"type":{"k":12,"name":"Seq.Keyed","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v4.0.0-rc.2/Seq.Keyed"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#toKeyedSeq()","inherited":{"interface":"Collection","label":"toKeyedSeq()","url":"/docs/v4.0.0-rc.2/Collection#toKeyedSeq()"}},"toIndexedSeq":{"name":"toIndexedSeq","label":"toIndexedSeq()","id":"toIndexedSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":3484,"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"V"}],"url":"/docs/v4.0.0-rc.2/Seq.Indexed"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#toIndexedSeq()","inherited":{"interface":"Collection","label":"toIndexedSeq()","url":"/docs/v4.0.0-rc.2/Collection#toIndexedSeq()"}},"toSetSeq":{"name":"toSetSeq","label":"toSetSeq()","id":"toSetSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":3489,"type":{"k":12,"name":"Seq.Set","args":[{"k":11,"param":"V"}],"url":"/docs/v4.0.0-rc.2/Seq.Set"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#toSetSeq()","inherited":{"interface":"Collection","label":"toSetSeq()","url":"/docs/v4.0.0-rc.2/Collection#toSetSeq()"}},"keys":{"name":"keys","label":"keys()","id":"keys()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"/docs/v4.0.0-rc.2/Collection\">Collection</a></code>&#39;s keys.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/v4.0.0-rc.2/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n","notes":[]},"signatures":[{"line":3501,"type":{"k":12,"name":"IterableIterator","args":[{"k":11,"param":"K"}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#keys()","inherited":{"interface":"Collection","label":"keys()","url":"/docs/v4.0.0-rc.2/Collection#keys()"}},"values":{"name":"values","label":"values()","id":"values()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"/docs/v4.0.0-rc.2/Collection\">Collection</a></code>&#39;s values.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/v4.0.0-rc.2/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n","notes":[]},"signatures":[{"line":3510,"type":{"k":12,"name":"IterableIterator","args":[{"k":11,"param":"V"}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#values()","inherited":{"interface":"Collection","label":"values()","url":"/docs/v4.0.0-rc.2/Collection#values()"}},"entries":{"name":"entries","label":"entries()","id":"entries()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"/docs/v4.0.0-rc.2/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\" >[</span> key<span class=\"token punctuation\" >,</span> value <span class=\"token punctuation\" >]</span></code> tuples.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/v4.0.0-rc.2/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n","notes":[]},"signatures":[{"line":3519,"type":{"k":12,"name":"IterableIterator","args":[{"k":15,"types":[{"k":11,"param":"K"},{"k":11,"param":"V"}]}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#entries()","inherited":{"interface":"Collection","label":"entries()","url":"/docs/v4.0.0-rc.2/Collection#entries()"}},"keySeq":{"name":"keySeq","label":"keySeq()","id":"keySeq()","group":"Collections (Seq)","doc":{"synopsis":"<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n","description":"","notes":[]},"signatures":[{"line":3528,"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"K"}],"url":"/docs/v4.0.0-rc.2/Seq.Indexed"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#keySeq()","inherited":{"interface":"Collection","label":"keySeq()","url":"/docs/v4.0.0-rc.2/Collection#keySeq()"}},"valueSeq":{"name":"valueSeq","label":"valueSeq()","id":"valueSeq()","group":"Collections (Seq)","doc":{"synopsis":"<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":3533,"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"V"}],"url":"/docs/v4.0.0-rc.2/Seq.Indexed"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#valueSeq()","inherited":{"interface":"Collection","label":"valueSeq()","url":"/docs/v4.0.0-rc.2/Collection#valueSeq()"}},"entrySeq":{"name":"entrySeq","label":"entrySeq()","id":"entrySeq()","group":"Collections (Seq)","doc":{"synopsis":"<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n","description":"","notes":[]},"signatures":[{"line":3538,"type":{"k":12,"name":"Seq.Indexed","args":[{"k":15,"types":[{"k":11,"param":"K"},{"k":11,"param":"V"}]}],"url":"/docs/v4.0.0-rc.2/Seq.Indexed"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#entrySeq()","inherited":{"interface":"Collection","label":"entrySeq()","url":"/docs/v4.0.0-rc.2/Collection#entrySeq()"}},"filterNot":{"name":"filterNot","label":"filterNot()","id":"filterNot()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>filterNot<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"a\": 1, \"c\": 3 }</span></code><p>Note: <code><a href=\"/docs/v4.0.0-rc.2/List#filterNot()\">filterNot()</a></code> always returns a new instance, even if it results in\nnot filtering out any values.</p></p>\n","notes":[]},"signatures":[{"line":3596,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#filterNot()","inherited":{"interface":"Collection","label":"filterNot()","url":"/docs/v4.0.0-rc.2/Collection#filterNot()"}},"reverse":{"name":"reverse","label":"reverse()","id":"reverse()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Collection of the same type in reverse order.</p>\n","description":"","notes":[]},"signatures":[{"line":3604,"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#reverse()","inherited":{"interface":"Collection","label":"reverse()","url":"/docs/v4.0.0-rc.2/Collection#reverse()"}},"sort":{"name":"sort","label":"sort()","id":"sort()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n","description":"<p>If a <code><span class=\"t param\">comparator</span></code> is not provided, a default comparator uses <code><span class=\"token operator\" >&lt;</span></code> and <code><span class=\"token operator\" >></span></code>.</p>\n<p><code>comparator<span class=\"token punctuation\" >(</span>valueA<span class=\"token punctuation\" >,</span> valueB<span class=\"token punctuation\" >)</span></code>:</p>\n<ul>\n<li>Returns <code><span class=\"token number\" >0</span></code> if the elements should not be swapped.</li>\n<li>Returns <code><span class=\"token operator\" >-</span><span class=\"token number\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code><span class=\"token number\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map<span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> returns OrderedMap.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >\"c\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"b\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >&lt;</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >></span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >===</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap { \"a\": 1, \"b\": 2, \"c\": 3 }</span></code><p>Note: <code><a href=\"/docs/v4.0.0-rc.2/List#sort()\">sort()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p>\n","notes":[]},"signatures":[{"line":3636,"params":[{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"V"}},{"name":"valueB","type":{"k":11,"param":"V"}}],"type":{"k":6}},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#sort()","inherited":{"interface":"Collection","label":"sort()","url":"/docs/v4.0.0-rc.2/Collection#sort()"}},"sortBy":{"name":"sortBy","label":"sortBy()","id":"sortBy()","group":"Sequence algorithms","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v4.0.0-rc.2/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n","description":"<p><code class=\"codeBlock\">hitters<span class=\"token punctuation\" >.</span>sortBy<span class=\"token punctuation\" >(</span>hitter <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> hitter<span class=\"token punctuation\" >.</span>avgHits<span class=\"token punctuation\" >)</span></code><p>Note: <code><a href=\"/docs/v4.0.0-rc.2/List#sortBy()\">sortBy()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p></p>\n","notes":[]},"signatures":[{"line":3647,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"C"}},{"name":"valueB","type":{"k":11,"param":"C"}}],"type":{"k":6}},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#sortBy()","inherited":{"interface":"Collection","label":"sortBy()","url":"/docs/v4.0.0-rc.2/Collection#sortBy()"}},"groupBy":{"name":"groupBy","label":"groupBy()","id":"groupBy()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a <code><a href=\"/docs/v4.0.0-rc.2/Collection.Keyed\">Collection.Keyed</a></code> of <code><span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Keyeds</span></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n","description":"<p>Note: This is always an eager operation.</p>\n<p>```js\nconst { List, Map } = require(&#39;immutable&#39;)\nconst listOfMaps = List([\n  Map({ v: 0 }),\n  Map({ v: 1 }),\n  Map({ v: 1 }),\n  Map({ v: 0 }),\n  Map({ v: 2 })\n])\nconst groupsOfMaps = listOfMaps.groupBy(x =&gt; x.get(&#39;v&#39;))\n// Map {\n//   0: List [ Map{ &quot;v&quot;: 0 }, Map { &quot;v&quot;: 0 } ],\n//   1: List [ Map{ &quot;v&quot;: 1 }, Map { &quot;v&quot;: 1 } ],\n//   2: List [ Map{ &quot;v&quot;: 2 } ],\n// }</p>\n","notes":[]},"signatures":[{"line":3674,"typeParams":["G"],"params":[{"name":"grouper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"G"}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Seq.Keyed","args":[{"k":11,"param":"G"},{"k":12,"name":"Collection","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]}],"url":"/docs/v4.0.0-rc.2/Seq.Keyed"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#groupBy()","inherited":{"interface":"Collection","label":"groupBy()","url":"/docs/v4.0.0-rc.2/Collection#groupBy()"}},"forEach":{"name":"forEach","label":"forEach()","id":"forEach()","group":"Side effects","doc":{"synopsis":"<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n","description":"<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n","notes":[]},"signatures":[{"line":3689,"params":[{"name":"sideEffect","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":1}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":6}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#forEach()","inherited":{"interface":"Collection","label":"forEach()","url":"/docs/v4.0.0-rc.2/Collection#forEach()"}},"slice":{"name":"slice","label":"slice()","id":"slice()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n","description":"<p>If begin is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> returns a Collection of the last two entries. If it is not\nprovided the new Collection will begin at the beginning of this Collection.</p>\n<p>If end is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> returns an Collection of everything but the last entry. If\nit is not provided, the new Collection will continue through the end of\nthis Collection.</p>\n<p>If the requested slice is equivalent to the current Collection, then it\nwill return itself.</p>\n","notes":[]},"signatures":[{"line":3713,"params":[{"name":"begin","type":{"k":6},"optional":true},{"name":"end","type":{"k":6},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#slice()","inherited":{"interface":"Collection","label":"slice()","url":"/docs/v4.0.0-rc.2/Collection#slice()"}},"rest":{"name":"rest","label":"rest()","id":"rest()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n","description":"","notes":[]},"signatures":[{"line":3719,"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#rest()","inherited":{"interface":"Collection","label":"rest()","url":"/docs/v4.0.0-rc.2/Collection#rest()"}},"butLast":{"name":"butLast","label":"butLast()","id":"butLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n","description":"","notes":[]},"signatures":[{"line":3725,"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#butLast()","inherited":{"interface":"Collection","label":"butLast()","url":"/docs/v4.0.0-rc.2/Collection#butLast()"}},"skip":{"name":"skip","label":"skip()","id":"skip()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":3731,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#skip()","inherited":{"interface":"Collection","label":"skip()","url":"/docs/v4.0.0-rc.2/Collection#skip()"}},"skipLast":{"name":"skipLast","label":"skipLast()","id":"skipLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":3737,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#skipLast()","inherited":{"interface":"Collection","label":"skipLast()","url":"/docs/v4.0.0-rc.2/Collection#skipLast()"}},"skipWhile":{"name":"skipWhile","label":"skipWhile()","id":"skipWhile()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"cat\", \"hat\", \"god\"\" ]</span></code></p>\n","notes":[]},"signatures":[{"line":3750,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#skipWhile()","inherited":{"interface":"Collection","label":"skipWhile()","url":"/docs/v4.0.0-rc.2/Collection#skipWhile()"}},"skipUntil":{"name":"skipUntil","label":"skipUntil()","id":"skipUntil()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"hat\", \"god\"\" ]</span></code></p>\n","notes":[]},"signatures":[{"line":3766,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#skipUntil()","inherited":{"interface":"Collection","label":"skipUntil()","url":"/docs/v4.0.0-rc.2/Collection#skipUntil()"}},"take":{"name":"take","label":"take()","id":"take()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":3775,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#take()","inherited":{"interface":"Collection","label":"take()","url":"/docs/v4.0.0-rc.2/Collection#take()"}},"takeLast":{"name":"takeLast","label":"takeLast()","id":"takeLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":3781,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#takeLast()","inherited":{"interface":"Collection","label":"takeLast()","url":"/docs/v4.0.0-rc.2/Collection#takeLast()"}},"takeWhile":{"name":"takeWhile","label":"takeWhile()","id":"takeWhile()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span></code></p>\n","notes":[]},"signatures":[{"line":3794,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#takeWhile()","inherited":{"interface":"Collection","label":"takeWhile()","url":"/docs/v4.0.0-rc.2/Collection#takeWhile()"}},"takeUntil":{"name":"takeUntil","label":"takeUntil()","id":"takeUntil()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n","description":"<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span></code></p>\n","notes":[]},"signatures":[{"line":3810,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#takeUntil()","inherited":{"interface":"Collection","label":"takeUntil()","url":"/docs/v4.0.0-rc.2/Collection#takeUntil()"}},"flatten":{"name":"flatten","label":"flatten()","id":"flatten()","group":"Combination","signatures":[{"line":3840,"params":[{"name":"depth","type":{"k":6},"optional":true}],"type":{"k":12,"name":"Collection","args":[{"k":1},{"k":1}],"url":"/docs/v4.0.0-rc.2/Collection"}},{"line":3841,"params":[{"name":"shallow","type":{"k":5},"optional":true}],"type":{"k":12,"name":"Collection","args":[{"k":1},{"k":1}],"url":"/docs/v4.0.0-rc.2/Collection"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#flatten()","inherited":{"interface":"Collection","label":"flatten()","url":"/docs/v4.0.0-rc.2/Collection#flatten()"}},"reduce":{"name":"reduce","label":"reduce()","id":"reduce()","group":"Reducing a value","signatures":[{"line":3864,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":11,"param":"R"}},{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}},{"name":"initialReduction","type":{"k":11,"param":"R"}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":11,"param":"R"}},{"line":3869,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":13,"types":[{"k":11,"param":"V"},{"k":11,"param":"R"}]}},{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}}],"type":{"k":11,"param":"R"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#reduce()","inherited":{"interface":"Collection","label":"reduce()","url":"/docs/v4.0.0-rc.2/Collection#reduce()"}},"reduceRight":{"name":"reduceRight","label":"reduceRight()","id":"reduceRight()","group":"Reducing a value","signatures":[{"line":3879,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":11,"param":"R"}},{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}},{"name":"initialReduction","type":{"k":11,"param":"R"}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":11,"param":"R"}},{"line":3884,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":13,"types":[{"k":11,"param":"V"},{"k":11,"param":"R"}]}},{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}}],"type":{"k":11,"param":"R"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#reduceRight()","inherited":{"interface":"Collection","label":"reduceRight()","url":"/docs/v4.0.0-rc.2/Collection#reduceRight()"}},"every":{"name":"every","label":"every()","id":"every()","group":"Reducing a value","doc":{"synopsis":"<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":3891,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#every()","inherited":{"interface":"Collection","label":"every()","url":"/docs/v4.0.0-rc.2/Collection#every()"}},"some":{"name":"some","label":"some()","id":"some()","group":"Reducing a value","doc":{"synopsis":"<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":3899,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#some()","inherited":{"interface":"Collection","label":"some()","url":"/docs/v4.0.0-rc.2/Collection#some()"}},"join":{"name":"join","label":"join()","id":"join()","group":"Reducing a value","doc":{"synopsis":"<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\" >\",\"</span></code>.</p>\n","description":"","notes":[]},"signatures":[{"line":3908,"params":[{"name":"separator","type":{"k":7},"optional":true}],"type":{"k":7}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#join()","inherited":{"interface":"Collection","label":"join()","url":"/docs/v4.0.0-rc.2/Collection#join()"}},"isEmpty":{"name":"isEmpty","label":"isEmpty()","id":"isEmpty()","group":"Reducing a value","doc":{"synopsis":"<p>Returns true if this Collection includes no values.</p>\n","description":"<p>For some lazy <code><a href=\"/docs/v4.0.0-rc.2/Seq\">Seq</a></code>, <code><a href=\"/docs/v4.0.0-rc.2/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n","notes":[]},"signatures":[{"line":3916,"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#isEmpty()","inherited":{"interface":"Collection","label":"isEmpty()","url":"/docs/v4.0.0-rc.2/Collection#isEmpty()"}},"count":{"name":"count","label":"count()","id":"count()","group":"Reducing a value","signatures":[{"line":3928,"type":{"k":6}},{"line":3929,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":6}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#count()","inherited":{"interface":"Collection","label":"count()","url":"/docs/v4.0.0-rc.2/Collection#count()"}},"countBy":{"name":"countBy","label":"countBy()","id":"countBy()","group":"Reducing a value","doc":{"synopsis":"<p>Returns a <code><a href=\"/docs/v4.0.0-rc.2/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n","description":"<p>Note: This is not a lazy operation.</p>\n","notes":[]},"signatures":[{"line":3940,"typeParams":["G"],"params":[{"name":"grouper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"G"}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":12,"name":"Map","args":[{"k":11,"param":"G"},{"k":6}],"url":"/docs/v4.0.0-rc.2/Map"}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#countBy()","inherited":{"interface":"Collection","label":"countBy()","url":"/docs/v4.0.0-rc.2/Collection#countBy()"}},"find":{"name":"find","label":"find()","id":"find()","group":"Search for value","doc":{"synopsis":"<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":3951,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true},{"name":"notSetValue","type":{"k":11,"param":"V"},"optional":true}],"type":{"k":13,"types":[{"k":11,"param":"V"},{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#find()","inherited":{"interface":"Collection","label":"find()","url":"/docs/v4.0.0-rc.2/Collection#find()"}},"findLast":{"name":"findLast","label":"findLast()","id":"findLast()","group":"Search for value","doc":{"synopsis":"<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":3962,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true},{"name":"notSetValue","type":{"k":11,"param":"V"},"optional":true}],"type":{"k":13,"types":[{"k":11,"param":"V"},{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#findLast()","inherited":{"interface":"Collection","label":"findLast()","url":"/docs/v4.0.0-rc.2/Collection#findLast()"}},"findEntry":{"name":"findEntry","label":"findEntry()","id":"findEntry()","group":"Search for value","doc":{"synopsis":"<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":3971,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true},{"name":"notSetValue","type":{"k":11,"param":"V"},"optional":true}],"type":{"k":13,"types":[{"k":15,"types":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#findEntry()","inherited":{"interface":"Collection","label":"findEntry()","url":"/docs/v4.0.0-rc.2/Collection#findEntry()"}},"findLastEntry":{"name":"findLastEntry","label":"findLastEntry()","id":"findLastEntry()","group":"Search for value","doc":{"synopsis":"<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":3983,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true},{"name":"notSetValue","type":{"k":11,"param":"V"},"optional":true}],"type":{"k":13,"types":[{"k":15,"types":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#findLastEntry()","inherited":{"interface":"Collection","label":"findLastEntry()","url":"/docs/v4.0.0-rc.2/Collection#findLastEntry()"}},"findKey":{"name":"findKey","label":"findKey()","id":"findKey()","group":"Search for value","doc":{"synopsis":"<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":3992,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":13,"types":[{"k":11,"param":"K"},{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#findKey()","inherited":{"interface":"Collection","label":"findKey()","url":"/docs/v4.0.0-rc.2/Collection#findKey()"}},"findLastKey":{"name":"findLastKey","label":"findLastKey()","id":"findLastKey()","group":"Search for value","doc":{"synopsis":"<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":4002,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":1},"optional":true}],"type":{"k":13,"types":[{"k":11,"param":"K"},{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#findLastKey()","inherited":{"interface":"Collection","label":"findLastKey()","url":"/docs/v4.0.0-rc.2/Collection#findLastKey()"}},"keyOf":{"name":"keyOf","label":"keyOf()","id":"keyOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the key associated with the search value, or undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":4010,"params":[{"name":"searchValue","type":{"k":11,"param":"V"}}],"type":{"k":13,"types":[{"k":11,"param":"K"},{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#keyOf()","inherited":{"interface":"Collection","label":"keyOf()","url":"/docs/v4.0.0-rc.2/Collection#keyOf()"}},"lastKeyOf":{"name":"lastKeyOf","label":"lastKeyOf()","id":"lastKeyOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the last key associated with the search value, or undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":4015,"params":[{"name":"searchValue","type":{"k":11,"param":"V"}}],"type":{"k":13,"types":[{"k":11,"param":"K"},{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#lastKeyOf()","inherited":{"interface":"Collection","label":"lastKeyOf()","url":"/docs/v4.0.0-rc.2/Collection#lastKeyOf()"}},"max":{"name":"max","label":"max()","id":"max()","group":"Search for value","doc":{"synopsis":"<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/v4.0.0-rc.2/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/v4.0.0-rc.2/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n","notes":[]},"signatures":[{"line":4032,"params":[{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"V"}},{"name":"valueB","type":{"k":11,"param":"V"}}],"type":{"k":6}},"optional":true}],"type":{"k":13,"types":[{"k":11,"param":"V"},{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#max()","inherited":{"interface":"Collection","label":"max()","url":"/docs/v4.0.0-rc.2/Collection#max()"}},"maxBy":{"name":"maxBy","label":"maxBy()","id":"maxBy()","group":"Search for value","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v4.0.0-rc.2/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"<p><code class=\"codeBlock\">hitters<span class=\"token punctuation\" >.</span>maxBy<span class=\"token punctuation\" >(</span>hitter <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> hitter<span class=\"token punctuation\" >.</span>avgHits<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code></p>\n","notes":[]},"signatures":[{"line":4041,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"C"}},{"name":"valueB","type":{"k":11,"param":"C"}}],"type":{"k":6}},"optional":true}],"type":{"k":13,"types":[{"k":11,"param":"V"},{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#maxBy()","inherited":{"interface":"Collection","label":"maxBy()","url":"/docs/v4.0.0-rc.2/Collection#maxBy()"}},"min":{"name":"min","label":"min()","id":"min()","group":"Search for value","doc":{"synopsis":"<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/v4.0.0-rc.2/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/v4.0.0-rc.2/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n","notes":[]},"signatures":[{"line":4061,"params":[{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"V"}},{"name":"valueB","type":{"k":11,"param":"V"}}],"type":{"k":6}},"optional":true}],"type":{"k":13,"types":[{"k":11,"param":"V"},{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#min()","inherited":{"interface":"Collection","label":"min()","url":"/docs/v4.0.0-rc.2/Collection#min()"}},"minBy":{"name":"minBy","label":"minBy()","id":"minBy()","group":"Search for value","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v4.0.0-rc.2/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"<p><code class=\"codeBlock\">hitters<span class=\"token punctuation\" >.</span>minBy<span class=\"token punctuation\" >(</span>hitter <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> hitter<span class=\"token punctuation\" >.</span>avgHits<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code></p>\n","notes":[]},"signatures":[{"line":4070,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":10,"params":[{"name":"valueA","type":{"k":11,"param":"C"}},{"name":"valueB","type":{"k":11,"param":"C"}}],"type":{"k":6}},"optional":true}],"type":{"k":13,"types":[{"k":11,"param":"V"},{"k":4}]}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#minBy()","inherited":{"interface":"Collection","label":"minBy()","url":"/docs/v4.0.0-rc.2/Collection#minBy()"}},"isSubset":{"name":"isSubset","label":"isSubset()","id":"isSubset()","group":"Comparison","doc":{"synopsis":"<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4081,"params":[{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"V"}]}}],"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#isSubset()","inherited":{"interface":"Collection","label":"isSubset()","url":"/docs/v4.0.0-rc.2/Collection#isSubset()"}},"isSuperset":{"name":"isSuperset","label":"isSuperset()","id":"isSuperset()","group":"Comparison","doc":{"synopsis":"<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n","description":"","notes":[]},"signatures":[{"line":4086,"params":[{"name":"iter","type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"V"}]}}],"type":{"k":5}}],"url":"/docs/v4.0.0-rc.2/OrderedMap#isSuperset()","inherited":{"interface":"Collection","label":"isSuperset()","url":"/docs/v4.0.0-rc.2/Collection#isSuperset()"}}},"line":1435,"typeParams":["K","V"],"extends":[{"k":12,"name":"Map","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v4.0.0-rc.2/Map"}]},"label":"OrderedMap","url":"/docs/v4.0.0-rc.2/OrderedMap"},"sidebarLinks":[{"label":"fromJS()","url":"/docs/v4.0.0-rc.2/fromJS()"},{"label":"is()","url":"/docs/v4.0.0-rc.2/is()"},{"label":"hash()","url":"/docs/v4.0.0-rc.2/hash()"},{"label":"isImmutable()","url":"/docs/v4.0.0-rc.2/isImmutable()"},{"label":"isCollection()","url":"/docs/v4.0.0-rc.2/isCollection()"},{"label":"isKeyed()","url":"/docs/v4.0.0-rc.2/isKeyed()"},{"label":"isIndexed()","url":"/docs/v4.0.0-rc.2/isIndexed()"},{"label":"isAssociative()","url":"/docs/v4.0.0-rc.2/isAssociative()"},{"label":"isOrdered()","url":"/docs/v4.0.0-rc.2/isOrdered()"},{"label":"isValueObject()","url":"/docs/v4.0.0-rc.2/isValueObject()"},{"label":"ValueObject","url":"/docs/v4.0.0-rc.2/ValueObject"},{"label":"List","url":"/docs/v4.0.0-rc.2/List"},{"label":"Map","url":"/docs/v4.0.0-rc.2/Map"},{"label":"OrderedMap","url":"/docs/v4.0.0-rc.2/OrderedMap"},{"label":"Set","url":"/docs/v4.0.0-rc.2/Set"},{"label":"OrderedSet","url":"/docs/v4.0.0-rc.2/OrderedSet"},{"label":"Stack","url":"/docs/v4.0.0-rc.2/Stack"},{"label":"Range()","url":"/docs/v4.0.0-rc.2/Range()"},{"label":"Repeat()","url":"/docs/v4.0.0-rc.2/Repeat()"},{"label":"Record","url":"/docs/v4.0.0-rc.2/Record"},{"label":"Record.Class","url":"/docs/v4.0.0-rc.2/Record.Class"},{"label":"Record.Instance","url":"/docs/v4.0.0-rc.2/Record.Instance"},{"label":"Seq","url":"/docs/v4.0.0-rc.2/Seq"},{"label":"Seq.Keyed","url":"/docs/v4.0.0-rc.2/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/v4.0.0-rc.2/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/v4.0.0-rc.2/Seq.Set"},{"label":"Collection","url":"/docs/v4.0.0-rc.2/Collection"},{"label":"Collection.Keyed","url":"/docs/v4.0.0-rc.2/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/v4.0.0-rc.2/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/v4.0.0-rc.2/Collection.Set"}]},"__N_SSG":true}