{"pageProps":{"versions":["v4.0.0-rc.2","v3.8.1","latest@main"],"version":"v4.0.0-rc.2","overviewData":{"doc":{"synopsis":"<p>Immutable data encourages pure functions (data-in, data-out) and lends itself\nto much simpler application development and enabling techniques from\nfunctional programming such as lazy evaluation.</p>\n","description":"<p>While designed to bring these powerful functional concepts to JavaScript, it\npresents an Object-Oriented API familiar to Javascript engineers and closely\nmirroring that of Array, Map, and Set. It is easy and efficient to convert to\nand from plain Javascript types.</p>\n<h2 id=\"how-to-read-these-docs\">How to read these docs</h2>\n<p>In order to better explain what kinds of values the Immutable.js API expects\nand produces, this documentation is presented in a statically typed dialect of\nJavaScript (like <a href=\"https://flowtype.org/\">Flow</a> or <a href=\"http://www.typescriptlang.org/\">TypeScript</a>). You <em>don&#39;t need</em> to use these\ntype checking tools in order to use Immutable.js, however becoming familiar\nwith their syntax will help you get a deeper understanding of this API.</p>\n<p><strong>A few examples and how to read them.</strong></p>\n<p>All methods describe the kinds of data they accept and the kinds of data\nthey return. For example a function which accepts two numbers and returns\na number would look like this:</p>\n<code class=\"codeBlock\">sum<span class=\"token punctuation\" >(</span>first<span class=\"token punctuation\" >:</span> number<span class=\"token punctuation\" >,</span> second<span class=\"token punctuation\" >:</span> number<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >:</span> number</code><p>Sometimes, methods can accept different kinds of data or return different\nkinds of data, and this is described with a <em>type variable</em>, which are\ntypically in all-caps. For example, a function which always returns the same\nkind of data it was provided would look like this:</p>\n<code class=\"codeBlock\">identity<span class=\"token operator\" >&lt;</span>T<span class=\"token operator\" >></span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >:</span> T<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >:</span> T</code><p>Type variables are defined with classes and referred to in methods. For\nexample, a class that holds onto a value for you might look like this:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >class</span> <span class=\"token class-name\" >Box</span><span class=\"token operator\" >&lt;</span>T<span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  constructor<span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >:</span> T<span class=\"token punctuation\" >)</span>\n  getValue<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >:</span> T\n<span class=\"token punctuation\" >}</span></code><p>In order to manipulate Immutable data, methods that we&#39;re used to affecting\na Collection instead return a new Collection of the same type. The type\n<code><span class=\"token var\" >this</span></code> refers to the same kind of class. For example, a List which returns\nnew Lists when you <code>push</code> a value onto it might look like:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >class</span> <span class=\"token class-name\" >List</span><span class=\"token operator\" >&lt;</span>T<span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  push<span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >:</span> T<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >:</span> <span class=\"token var\" >this</span>\n<span class=\"token punctuation\" >}</span></code><p>Many methods in Immutable.js accept values which implement the JavaScript\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">Iterable</a> protocol, and might appear like <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\" target=\"_blank\" rel=\"noopener\">Iterable&lt;string&gt;</a></code> for something\nwhich represents sequence of strings. Typically in JavaScript we use plain\nArrays (<code><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span></code>) when an Iterable is expected, but also all of the Immutable.js\ncollections are iterable themselves!</p>\n<p>For example, to get a value deep within a structure of data, we might use\n<code>getIn</code> which expects an <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\" target=\"_blank\" rel=\"noopener\">Iterable</a></code> path:</p>\n<code class=\"codeBlock\">getIn<span class=\"token punctuation\" >(</span>path<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Iterable</span><span class=\"token operator\" >&lt;</span>string <span class=\"token operator\" >|</span> number<span class=\"token operator\" >></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >:</span> any</code><p>To use this method, we could pass an array: <code>data<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >\"key\"</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span></code>.</p>\n<p>Note: All examples are presented in the modern <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\">ES2015</a> version of\nJavaScript. To run in older browsers, they need to be translated to ES3.</p>\n<p>For example:</p>\n<code class=\"codeBlock\"><span class=\"token comment\" spellcheck=\"true\">// ES2015\n</span><span class=\"token keyword\" >const</span> mappedFoo <span class=\"token operator\" >=</span> foo<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ES3\n</span><span class=\"token keyword\" >var</span> mappedFoo <span class=\"token operator\" >=</span> foo<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token block-keyword\" >function</span> <span class=\"token punctuation\" >(</span>x<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> x <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>","notes":[]},"api":[{"label":"fromJS()","url":"/docs/v4.0.0-rc.2/fromJS()","synopsis":"<p>Deeply converts plain JS objects and arrays to Immutable Maps and Lists.</p>\n"},{"label":"is()","url":"/docs/v4.0.0-rc.2/is()","synopsis":"<p>Value equality check with semantics similar to <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\" target=\"_blank\" rel=\"noopener\">Object.is</a></code>, but treats\nImmutable <code><a href=\"/docs/v4.0.0-rc.2/Collection\">Collection</a></code>s as values, equal if the second <code><a href=\"/docs/v4.0.0-rc.2/Collection\">Collection</a></code> includes\nequivalent values.</p>\n"},{"label":"hash()","url":"/docs/v4.0.0-rc.2/hash()","synopsis":"<p>The <code><a href=\"/docs/v4.0.0-rc.2/hash()\">hash()</a></code> function is an important part of how Immutable determines if\ntwo values are equivalent and is used to determine how to store those\nvalues. Provided with any value, <code><a href=\"/docs/v4.0.0-rc.2/hash()\">hash()</a></code> will return a 31-bit integer.</p>\n"},{"label":"isImmutable()","url":"/docs/v4.0.0-rc.2/isImmutable()","synopsis":"<p>True if <code><span class=\"t param\">maybeImmutable</span></code> is an Immutable Collection or Record.</p>\n"},{"label":"isCollection()","url":"/docs/v4.0.0-rc.2/isCollection()","synopsis":"<p>True if <code><span class=\"t param\">maybeCollection</span></code> is an Collection, or any of its subclasses.</p>\n"},{"label":"isKeyed()","url":"/docs/v4.0.0-rc.2/isKeyed()","synopsis":"<p>True if <code><span class=\"t param\">maybeKeyed</span></code> is an Collection.Keyed, or any of its subclasses.</p>\n"},{"label":"isIndexed()","url":"/docs/v4.0.0-rc.2/isIndexed()","synopsis":"<p>True if <code><span class=\"t param\">maybeIndexed</span></code> is a Collection.Indexed, or any of its subclasses.</p>\n"},{"label":"isAssociative()","url":"/docs/v4.0.0-rc.2/isAssociative()","synopsis":"<p>True if <code><span class=\"t param\">maybeAssociative</span></code> is either a Keyed or Indexed Collection.</p>\n"},{"label":"isOrdered()","url":"/docs/v4.0.0-rc.2/isOrdered()","synopsis":"<p>True if <code><span class=\"t param\">maybeOrdered</span></code> is an Collection where iteration order is well\ndefined. True for Collection.Indexed as well as OrderedMap and OrderedSet.</p>\n"},{"label":"isValueObject()","url":"/docs/v4.0.0-rc.2/isValueObject()","synopsis":"<p>True if <code><span class=\"t param\">maybeValue</span></code> is a JavaScript Object which has <em>both</em> <code>equals<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code>\nand <code>hashCode<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> methods.</p>\n"},{"label":"ValueObject","url":"/docs/v4.0.0-rc.2/ValueObject"},{"label":"List","url":"/docs/v4.0.0-rc.2/List","synopsis":"<p>Lists are ordered indexed dense collections, much like a JavaScript\nArray.</p>\n"},{"label":"Map","url":"/docs/v4.0.0-rc.2/Map","synopsis":"<p>Immutable Map is an unordered Collection.Keyed of (key, value) pairs with\n<code>O<span class=\"token punctuation\" >(</span>log32 N<span class=\"token punctuation\" >)</span></code> gets and <code>O<span class=\"token punctuation\" >(</span>log32 N<span class=\"token punctuation\" >)</span></code> persistent sets.</p>\n"},{"label":"OrderedMap","url":"/docs/v4.0.0-rc.2/OrderedMap","synopsis":"<p>A type of Map that has the additional guarantee that the iteration order of\nentries will be the order in which they were set().</p>\n"},{"label":"Set","url":"/docs/v4.0.0-rc.2/Set","synopsis":"<p>A Collection of unique values with <code>O<span class=\"token punctuation\" >(</span>log32 N<span class=\"token punctuation\" >)</span></code> adds and has.</p>\n"},{"label":"OrderedSet","url":"/docs/v4.0.0-rc.2/OrderedSet","synopsis":"<p>A type of Set that has the additional guarantee that the iteration order of\nvalues will be the order in which they were <code><a href=\"/docs/v4.0.0-rc.2/OrderedSet#add()\">add</a></code>ed.</p>\n"},{"label":"Stack","url":"/docs/v4.0.0-rc.2/Stack","synopsis":"<p>Stacks are indexed collections which support very efficient O(1) addition\nand removal from the front using <code><a href=\"/docs/v4.0.0-rc.2/Stack#unshift()\">unshift(v)</a></code> and <code><a href=\"/docs/v4.0.0-rc.2/Stack#shift()\">shift()</a></code>.</p>\n"},{"label":"Range()","url":"/docs/v4.0.0-rc.2/Range()","synopsis":"<p>Returns a Seq.Indexed of numbers from <code><span class=\"t param\">start</span></code> (inclusive) to <code><span class=\"t param\">end</span></code>\n(exclusive), by <code><span class=\"t param\">step</span></code>, where <code><span class=\"t param\">start</span></code> defaults to 0, <code><span class=\"t param\">step</span></code> to 1, and <code><span class=\"t param\">end</span></code> to\ninfinity. When <code><span class=\"t param\">start</span></code> is equal to <code><span class=\"t param\">end</span></code>, returns empty range.</p>\n"},{"label":"Repeat()","url":"/docs/v4.0.0-rc.2/Repeat()","synopsis":"<p>Returns a Seq.Indexed of <code><span class=\"t param\">value</span></code> repeated <code><span class=\"t param\">times</span></code> times. When <code><span class=\"t param\">times</span></code> is\nnot defined, returns an infinite <code><a href=\"/docs/v4.0.0-rc.2/Seq\">Seq</a></code> of <code><span class=\"t param\">value</span></code>.</p>\n"},{"label":"Record","url":"/docs/v4.0.0-rc.2/Record","synopsis":"<p>Creates a new Class which produces Record instances. A record is similar to\na JS object, but enforce a specific set of allowed string keys, and have\ndefault values.</p>\n"},{"label":"Record.Class","url":"/docs/v4.0.0-rc.2/Record.Class"},{"label":"Record.Instance","url":"/docs/v4.0.0-rc.2/Record.Instance"},{"label":"Seq","url":"/docs/v4.0.0-rc.2/Seq","synopsis":"<p>Represents a sequence of values, but may not be backed by a concrete data\nstructure.</p>\n"},{"label":"Seq.Keyed","url":"/docs/v4.0.0-rc.2/Seq.Keyed","synopsis":"<p><code><a href=\"/docs/v4.0.0-rc.2/Seq\">Seq</a></code> which represents key-value pairs.</p>\n"},{"label":"Seq.Indexed","url":"/docs/v4.0.0-rc.2/Seq.Indexed","synopsis":"<p><code><a href=\"/docs/v4.0.0-rc.2/Seq\">Seq</a></code> which represents an ordered indexed list of values.</p>\n"},{"label":"Seq.Set","url":"/docs/v4.0.0-rc.2/Seq.Set","synopsis":"<p><code><a href=\"/docs/v4.0.0-rc.2/Seq\">Seq</a></code> which represents a set of values.</p>\n"},{"label":"Collection","url":"/docs/v4.0.0-rc.2/Collection","synopsis":"<p>The <code><a href=\"/docs/v4.0.0-rc.2/Collection\">Collection</a></code> is a set of (key, value) entries which can be iterated, and\nis the base class for all collections in <code>immutable</code>, allowing them to\nmake use of all the Collection methods (such as <code><a href=\"/docs/v4.0.0-rc.2/Collection#map()\">map</a></code> and <code><a href=\"/docs/v4.0.0-rc.2/Collection#filter()\">filter</a></code>).</p>\n"},{"label":"Collection.Keyed","url":"/docs/v4.0.0-rc.2/Collection.Keyed","synopsis":"<p>Keyed Collections have discrete keys tied to each value.</p>\n"},{"label":"Collection.Indexed","url":"/docs/v4.0.0-rc.2/Collection.Indexed","synopsis":"<p>Indexed Collections have incrementing numeric keys. They exhibit\nslightly different behavior than <code><a href=\"/docs/v4.0.0-rc.2/Collection.Keyed\">Collection.Keyed</a></code> for some methods in order\nto better mirror the behavior of JavaScript&#39;s <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array</a></code>, and add methods\nwhich do not make sense on non-indexed Collections such as <code><a href=\"/docs/v4.0.0-rc.2/Collection.Indexed#indexOf()\">indexOf</a></code>.</p>\n"},{"label":"Collection.Set","url":"/docs/v4.0.0-rc.2/Collection.Set","synopsis":"<p>Set Collections only represent values. They have no associated keys or\nindices. Duplicate values are possible in the lazy <code><a href=\"/docs/v4.0.0-rc.2/Seq.Set\">Seq.Set</a></code>s, however\nthe concrete <code><a href=\"/docs/v4.0.0-rc.2/Set\">Set</a></code> Collection does not allow duplicate values.</p>\n"}]},"sidebarLinks":[{"label":"fromJS()","url":"/docs/v4.0.0-rc.2/fromJS()"},{"label":"is()","url":"/docs/v4.0.0-rc.2/is()"},{"label":"hash()","url":"/docs/v4.0.0-rc.2/hash()"},{"label":"isImmutable()","url":"/docs/v4.0.0-rc.2/isImmutable()"},{"label":"isCollection()","url":"/docs/v4.0.0-rc.2/isCollection()"},{"label":"isKeyed()","url":"/docs/v4.0.0-rc.2/isKeyed()"},{"label":"isIndexed()","url":"/docs/v4.0.0-rc.2/isIndexed()"},{"label":"isAssociative()","url":"/docs/v4.0.0-rc.2/isAssociative()"},{"label":"isOrdered()","url":"/docs/v4.0.0-rc.2/isOrdered()"},{"label":"isValueObject()","url":"/docs/v4.0.0-rc.2/isValueObject()"},{"label":"ValueObject","url":"/docs/v4.0.0-rc.2/ValueObject"},{"label":"List","url":"/docs/v4.0.0-rc.2/List"},{"label":"Map","url":"/docs/v4.0.0-rc.2/Map"},{"label":"OrderedMap","url":"/docs/v4.0.0-rc.2/OrderedMap"},{"label":"Set","url":"/docs/v4.0.0-rc.2/Set"},{"label":"OrderedSet","url":"/docs/v4.0.0-rc.2/OrderedSet"},{"label":"Stack","url":"/docs/v4.0.0-rc.2/Stack"},{"label":"Range()","url":"/docs/v4.0.0-rc.2/Range()"},{"label":"Repeat()","url":"/docs/v4.0.0-rc.2/Repeat()"},{"label":"Record","url":"/docs/v4.0.0-rc.2/Record"},{"label":"Record.Class","url":"/docs/v4.0.0-rc.2/Record.Class"},{"label":"Record.Instance","url":"/docs/v4.0.0-rc.2/Record.Instance"},{"label":"Seq","url":"/docs/v4.0.0-rc.2/Seq"},{"label":"Seq.Keyed","url":"/docs/v4.0.0-rc.2/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/v4.0.0-rc.2/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/v4.0.0-rc.2/Seq.Set"},{"label":"Collection","url":"/docs/v4.0.0-rc.2/Collection"},{"label":"Collection.Keyed","url":"/docs/v4.0.0-rc.2/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/v4.0.0-rc.2/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/v4.0.0-rc.2/Collection.Set"}]},"__N_SSG":true}